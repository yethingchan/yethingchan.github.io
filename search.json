[{"title":"LR","url":"/posts/2557485614.html","content":"LR学习笔记\n\n<!-- more -->\n","tags":["学习笔记","LR","设计"],"categories":["笔记"]},{"title":"PR","url":"/posts/2114420595.html","content":"PR学习笔记\n\n<!-- more -->\n","tags":["学习笔记","设计","PR"],"categories":["笔记"]},{"title":"PS","url":"/posts/151015397.html","content":"PS学习笔记\n\n<!-- more -->\n","tags":["设计","PS"],"categories":["笔记"]},{"title":"CAD","url":"/posts/357437766.html","content":"CAD学习笔记\n\n<!-- more -->\n## 快捷键\n---\n\n- ![](../images/img-20250924195700839.png)\n- F7 -  图形格栅\n- F8 -  让每一根线都是直线\n- F9 - 捕捉模式\n- F10 - 极轴追踪 (极轴就是正在画的线的第二个点和以画的线（点的相）)\n","tags":["学习笔记","技术"],"categories":["笔记"]},{"title":"Py","url":"/posts/3535504947.html","content":"\nPython学习笔记\n\n<!-- more -->\n## 学习路线\n---\n### 1. **GitHub 项目推荐：**\n\n这些项目都比较完整且适合用于学习高级技巧：\n\n- **[Scrapy](https://github.com/scrapy/scrapy)**  \n    Scrapy 是 Python 中非常流行的爬虫框架，适合构建大规模、复杂的爬虫。Scrapy 提供了强大的功能，如异步下载、数据管道、内建的请求调度等，适合用来构建大规模的爬虫项目。\n    \n- **[pyspider](https://github.com/binux/pyspider)**  \n    pyspider 是一个功能强大的爬虫框架，支持分布式爬虫、图形化界面、任务管理等。适合需要搭建爬虫平台的开发者。\n    \n- **[awesome-python-web scraping](https://github.com/lorien/awesome-web-scraping)**  \n    这个项目是一个开源资源库，收集了 Python 爬虫相关的各种工具、框架和教程，非常适合你学习一些高级的技巧和工具。\n    \n- **[selenium](https://github.com/SeleniumHQ/selenium)**  \n    Selenium 是一个广泛用于 Web 自动化的工具。它也经常被用来做动态网页的爬取。对于一些 JavaScript 渲染的页面，Selenium 非常有用。\n    \n- **[Requests-HTML](https://github.com/psf/requests-html)**  \n    一个简洁且强大的 HTML 解析库，支持现代网页中的 JavaScript 渲染。适合学习如何处理动态网页的抓取。\n    \n\n### 2. **书籍推荐：**\n\n这几本书会帮助你深入掌握 Python 爬虫的高级技巧：\n\n- **《Python Web Scraping》 by Katharine Jarmul & Richard Lawson**  \n    这是一本系统性介绍 Web Scraping 的书，覆盖了使用 Requests、BeautifulSoup、Scrapy 和 Selenium 的技巧。对于中高级爬虫开发者来说，是一本非常实用的参考书。\n    \n- **《Web Scraping with Python: Collecting Data from the Modern Web》 by Ryan Mitchell**  \n    这是一本非常经典的爬虫书籍，深入介绍了 HTML 解析、网页数据提取以及如何处理 JavaScript 渲染的页面（使用 Selenium）。它还讨论了爬虫的优化技术，比如异步爬取、缓存机制等，适合想深入学习爬虫的人。\n    \n- **《Data Science for Web Scraping and Crawling》 by Jason Brownlee**  \n    本书侧重于如何在数据科学领域应用 Web Scraping 技术，特别是在处理大数据时的高效爬虫架构。\n    \n- **《Scrapy for Beginners》 by Gabriel D. D.**  \n    这本书适合对 Scrapy 框架有一定了解的开发者。它不仅介绍了 Scrapy 的基本用法，还探讨了更高级的主题，比如 Scrapy 爬虫的分布式架构。\n    \n\n### 3. **在线教程和课程：**\n\n- **Scrapy 官方文档**  \n    Scrapy 的官方文档非常详细，适合初学者到高级开发者。通过文档，你可以深入了解 Scrapy 的各个组件，以及如何进行项目部署和优化。\n    \n- **Real Python - Web Scraping Tutorials**  \n    Real Python 提供了很多关于 Web Scraping 的高级教程，内容涉及 Selenium、Scrapy、API 爬取等，讲解非常详细，并且有实际代码示例。\n    \n- **[Coursera - Python and Web Scraping](https://www.coursera.org/courses?query=python%20web%20scraping)**  \n    Coursera 提供了关于 Python 爬虫的多门课程，包括基础课程和进阶课程，适合需要系统学习的开发者。\n    \n- **Udemy - Advanced Web Scraping with Python**  \n    这是一个付费课程，专注于爬虫的高级技巧，比如如何抓取动态内容，如何处理 AJAX 和 JavaScript 渲染的页面。\n    \n\n### 4. **学习路径：**\n\n- **基础阶段：**\n    \n    - 学习 `requests` 和 `BeautifulSoup`，理解 HTML 和 CSS，能够基本提取页面内容。\n        \n    - 学习如何使用正则表达式来抓取数据。\n        \n- **进阶阶段：**\n    \n    - 学习如何用 `Scrapy` 框架构建爬虫，掌握其调度机制、管道机制以及分布式爬虫。\n        \n    - 深入了解如何绕过反爬虫机制，如 IP 代理池、验证码识别、动态渲染网页的抓取技巧（如使用 Selenium）。\n        \n    - 学习如何优化爬虫，做到高效抓取（并发、异步处理、重试机制等）。\n        \n- **高级阶段：**\n    \n    - 掌握分布式爬虫的架构，如何进行分布式数据抓取和任务调度。\n        \n    - 深入理解大规模数据的存储、处理与清洗，能够高效处理大量网页数据。\n        \n    - 学习如何搭建爬虫平台，进行自动化和持续的抓取任务。\n\n\n\n## 马斯克的学习方法\n---\n### 1. **自学是关键**\n\n- **主动学习**：马斯克强调，自己大部分的知识都是通过阅读和自学获得的。他并没有在大学里专门学习物理、工程等领域的知识，而是通过大量阅读相关书籍、论文以及在线资源来获得这些知识。\n    \n- **书籍是最好的老师**：马斯克是个狂热的书迷，很多他获得知识的渠道都是通过阅读专业书籍和技术论文。他提到自己从小就是通过阅读书籍来补充知识的，尤其是在技术和工程方面。\n    \n\n**举例**：\n\n- 他曾说：“我并不是一开始就知道所有的东西，而是通过阅读积累知识。”\n    \n- 他提到过自己读过很多关于火箭、能源、汽车、人工智能等方面的书籍，甚至当他对某个领域感兴趣时，会集中精力大量阅读相关文献。\n    \n\n### 2. **“第一性原理”思维**\n\n- 马斯克的一个标志性思维方式就是“**第一性原理**”思维（First Principles Thinking）。他认为，解决问题时要回到事物的最基础原理，从零开始重新思考，而不是依赖于已有的假设和常规做法。\n    \n- **第一性原理**是从基础科学原理出发，分析一个问题的最基本构成要素，打破传统的框架和思维定势。这种方法促使他能够从根本上重新设计技术、产品和商业模式，突破已有行业的局限。\n    \n\n**举例**：\n\n- 在**SpaceX**创建初期，马斯克认为火箭制造成本太高，他通过第一性原理的思维，分析了火箭的基本构成和材料，发现可以用更低的成本制造火箭。这直接促成了 SpaceX 的成功。\n    \n- 他还提到：“你需要把事情分解成最基本的原理，然后重新组合，得出一种更好的解决方案。”\n    \n\n### 3. **跨学科学习与应用**\n\n- 马斯克非常注重跨学科的学习，他的多个成功项目（如SpaceX、Tesla、Neuralink等）都显示了他将多个学科的知识进行结合的能力。\n    \n- 他通过从不同领域获取知识，能更好地解决问题，并能够发现并应用不同学科之间的联系和交集。\n    \n\n**举例**：\n\n- 比如，他将物理学的原理应用到火箭设计中，并在**Tesla**的电动汽车设计中引入了很多工程学、能源学和计算机科学的概念，这些跨学科的知识使他能够打破传统设计局限，创造出创新的产品。\n    \n\n### 4. **批判性思维和怀疑一切**\n\n- 马斯克非常注重批判性思维，他认为任何既定的观点和假设都应该经受严苛的质疑。\n    \n- 他鼓励自己和团队成员要敢于**质疑现状**，不盲目接受传统做法，而是要提出新问题，寻找更高效、更创新的解决方案。\n    \n\n**举例**：\n\n- 在创办 SpaceX 时，马斯克并没有接受航空航天行业的现状，而是反复质疑“为什么火箭这么贵”，“是否有更好的制造方式”。他不断质疑并用第一性原理重新思考，最终找到了更有效的制造火箭的途径。\n    \n- 他也曾提到：“我总是会问，‘这是为什么？’‘它是必须的么？’你要挑战那些看似理所当然的假设。”\n    \n\n### 5. **动手实践与快速原型**\n\n- 马斯克是典型的“**做中学**”型学习者。他认为，理论知识的掌握固然重要，但真正的理解来自于实践和动手做。\n    \n- 他鼓励团队进行快速原型制作和迭代，不断通过实际操作和实验来验证理论。\n    \n\n**举例**：\n\n- 在 **Tesla**，他推动了“快速原型”开发的理念，团队会快速设计和测试新车型，并通过实际的试验来发现问题。\n    \n- 在**SpaceX**，他也同样采用了“快速原型”的方法，通过不断实验和迭代，减少了开发周期和成本。\n    \n\n### 6. **从失败中学习**\n\n- 马斯克对失败的看法非常独特，他认为失败是学习的一部分，而不是放弃的理由。他鼓励团队成员和自己从失败中吸取教训，并迅速调整策略。\n    \n- 他曾提到：“当你失败时，不要对自己太苛刻，最重要的是从失败中总结出教训，避免重复同样的错误。”\n    \n\n**举例**：\n\n- **SpaceX** 的火箭多次发射失败，马斯克并没有因此放弃，而是分析失败原因，改进设计，最终使 SpaceX 成为世界领先的私人航天公司。\n    \n- 在 **Tesla** 的初期，电动汽车面临巨大压力，许多投资者和评论家对其前景持悲观态度，但马斯克从失败中吸取了教训，不断迭代产品，最终使特斯拉成为全球最有价值的汽车公司之一。\n    \n\n### 7. **长期目标与持续学习**\n\n- 马斯克有非常明确的长期目标，并且他不断学习和调整自己的战略以实现这些目标。他并不是为了短期的成功而努力，而是为了更长远的理想（如人类在火星上定居、电动汽车普及等）而持续奋斗。\n    \n- 他认为，要达到这些长远目标，需要不断学习新的技能，吸收新的信息，扩展自己的视野。\n    \n\n**举例**：\n\n- 马斯克的目标是将人类送上火星，他为了实现这个目标，不仅学习了航天工程学，还学习了很多其他与空间探索相关的知识，并将这些知识应用于 **SpaceX** 的开发中。\n    \n\n### **总结：马斯克的学习方法**\n\n1. **自学为主**：通过大量阅读书籍和在线资源不断获取新知识。\n    \n2. **第一性原理**：从最基础的原理出发，避免被传统思维束缚，创新解决方案。\n    \n3. **跨学科学习**：结合多个领域的知识，发现它们之间的联系，进行创新。\n    \n4. **批判性思维**：怀疑一切、挑战传统观念，寻找更好的方法。\n    \n5. **动手实践**：通过实际操作和快速原型开发来验证理论，并不断迭代。\n    \n6. **从失败中学习**：把失败视为学习的机会，从中吸取经验，不断改进。\n    \n7. **长期目标与持续学习**：不断学习新技能，为实现长期目标积累知识和经验。\n\n\n## Python库\n---\n### 1. **掌握常用的标准库**\n\nPython 本身就有很多非常有用的标准库，掌握它们可以帮助你高效地进行开发。以下是一些常用的标准库：\n\n- **`os` 和 `sys`**：用于操作文件、目录，处理系统参数。\n    \n- **`datetime`**：用于日期和时间的操作。\n    \n- **`math`** 和 **`cmath`**：数学函数和复数运算。\n    \n- **`collections`**：提供了如 `Counter`、`deque`、`OrderedDict` 等增强的数据结构。\n    \n- **`itertools`**：用于高效地进行迭代操作，如生成组合、排列等。\n    \n- **`json`**：用于处理 JSON 数据。\n    \n- **`csv`**：处理 CSV 文件。\n    \n- **`sqlite3`**：内置的 SQLite 数据库操作库。\n    \n\n**学习方法**：\n\n- Python 官方文档：https://docs.python.org/3/library/（这里有详细的库说明和示例代码）\n    \n- 《Python 标准库》（书籍）是学习这些库的好资源。\n    \n\n### 2. **数据分析相关库**\n\n如果你对数据分析、数据处理、可视化等感兴趣，可以学习以下库：\n\n- **`NumPy`**：这是 Python 中用于数值计算的基础库，提供了多维数组和矩阵运算，支持大量的数学函数操作。\n    \n- **`Pandas`**：用于数据处理和分析，特别适合处理表格数据，支持数据的清洗、聚合、过滤等。\n    \n- **`Matplotlib`** 和 **`Seaborn`**：用于数据可视化，`Matplotlib` 是基本的绘图库，`Seaborn` 基于 `Matplotlib` 进行高级可视化。\n    \n- **`SciPy`**：用于科学计算，提供了很多用于数学、科学和工程计算的功能。\n    \n- **`Scikit-learn`**：用于机器学习，提供了许多常用的机器学习算法和工具。\n    \n\n**学习方法**：\n\n- **NumPy** 官方文档：https://numpy.org/doc/stable/\n    \n- **Pandas** 官方文档：https://pandas.pydata.org/pandas-docs/stable/\n    \n- **Matplotlib** 和 **Seaborn** 官方文档：https://matplotlib.org/stable/contents.html 和 https://seaborn.pydata.org/\n    \n- 书籍推荐：《Python 数据分析》（Wes McKinney）和《Python 机器学习》（Sebastian Raschka）\n    \n\n### 3. **Web开发相关库**\n\n如果你对 Web 开发感兴趣，可以学习以下库：\n\n- **`Flask`**：轻量级的 Web 框架，非常适合快速开发小型 Web 应用。\n    \n- **`Django`**：功能强大的全栈 Web 框架，适合开发复杂的 Web 应用，提供了很多现成的功能。\n    \n- **`FastAPI`**：新兴的 Web 框架，支持异步编程，性能极高，适合构建 API。\n    \n- **`Requests`**：用于发送 HTTP 请求，处理 API 调用。\n    \n- **`SQLAlchemy`**：ORM（对象关系映射）库，简化数据库操作。\n    \n\n**学习方法**：\n\n- 官方文档：`Flask` https://flask.palletsprojects.com/、`Django` [https://www.djangoproject.com/](https://www.djangoproject.com/)、`FastAPI` https://fastapi.tiangolo.com/\n    \n- 书籍推荐：《Flask Web 开发》（Miguel Grinberg）、《Django 3 Web 开发实战》\n    \n\n### 4. **机器学习与深度学习相关库**\n\n如果你对机器学习、深度学习感兴趣，Python 提供了非常多的库来帮助你实现这些目标：\n\n- **`TensorFlow`** 和 **`PyTorch`**：深度学习框架，用于构建神经网络和训练深度学习模型。\n    \n- **`Keras`**：在 TensorFlow 上运行的高级深度学习库，简化了模型的构建和训练。\n    \n- **`scikit-learn`**：机器学习库，提供了很多经典的机器学习算法和工具，适合用来构建各种模型。\n    \n- **`XGBoost`** 和 **`LightGBM`**：高效的梯度提升算法库，特别适合处理大规模数据。\n    \n- **`OpenCV`**：计算机视觉库，用于图像处理、对象识别等任务。\n    \n\n**学习方法**：\n\n- 官方文档：TensorFlow、PyTorch、Keras、scikit-learn\n    \n- 书籍推荐：《Python 机器学习》（Sebastian Raschka）和《Deep Learning with Python》（Francois Chollet）\n    \n\n### 5. **自动化与脚本编写**\n\n如果你对自动化、爬虫或者脚本编写感兴趣，可以学习以下库：\n\n- **`Selenium`**：自动化 Web 测试工具，也常用于 Web 数据抓取（爬虫）。\n    \n- **`BeautifulSoup`**：一个简单易用的 HTML/XML 解析库，常用来处理 Web 数据抓取。\n    \n- **`Requests`**：用于发送 HTTP 请求，结合爬虫库非常方便。\n    \n- **`Scrapy`**：一个强大的 Web 爬虫框架，适合处理大规模的爬虫任务。\n    \n\n**学习方法**：\n\n- **Selenium** 官方文档：https://www.selenium.dev/documentation/en/\n    \n- **BeautifulSoup** 官方文档：https://www.crummy.com/software/BeautifulSoup/bs4/doc/\n    \n- 书籍推荐：《Python 网络数据采集》（Ryan Mitchell）\n    \n\n### 6. **如何学习这些库：**\n\n1. **官方文档**：大多数 Python 库都有非常详细的官方文档，学习它们的最佳方法之一就是阅读文档，官方文档通常包括了安装、使用示例以及一些常见问题的解决方案。\n    \n2. **在线教程与课程**：\n    \n    - **Real Python**：一个很棒的 Python 资源网站，提供了很多关于各个库和项目的教程。Real Python\n        \n    - **Coursera**、**edX**、**Udemy** 等平台也提供了大量与 Python 和相关库的在线课程。\n        \n3. **GitHub 项目**：很多开源项目都会在 GitHub 上提供代码示例，学习如何在实际项目中使用这些库是非常有效的方式。\n    \n4. **做项目**：最好的学习方法是通过实际做项目来巩固你学到的知识。选择一个感兴趣的领域（如数据分析、Web 开发、自动化等），然后动手编写代码，解决实际问题。\n    \n5. **加入社区**：Stack Overflow、Reddit、Python 官方论坛等社区也有很多开发者分享的经验和问题讨论，参与其中能快速提升自己的技能。\n    \n\n---\n\n### 总结学习路线：\n\n1. **加强基础**：继续练习 Python 基础知识，提升编程能力。\n    \n2. **选择方向**：\n    \n    - 数据分析：学习 NumPy、Pandas、Matplotlib、Seaborn 等。\n        \n    - Web 开发：学习 Flask、Django、Requests 等。\n        \n    - 机器学习/深度学习：学习 scikit-learn、TensorFlow、PyTorch 等。\n        \n    - 自动化：学习 Selenium、BeautifulSoup、Scrapy 等。\n        \n3. **动手实践**：通过做项目来加深理解，并逐步提升技能。\n","tags":["学习笔记","Python"],"categories":["笔记"]},{"title":"影视飓风AppleLog视频笔记","url":"/posts/2772294383.html","content":"记录影视飓风课程中一些重要的拍摄或者剪辑知识点\n\n<!-- more -->\n## 文件命名管理\n- ![](../images/img-20250919190725860.png)\n\n## 曝光三要素\n- ![](../images/img-20250919200753157.png)\n- ![](../images/img-20250919210421058.png)\n- ![](../images/img-20250919210709772.png)\n- 越靠右画面过曝，越靠左画面欠曝 \n- 尽量把峰值拉到一点点右边，在中间的时候暗部看起来还是会有些噪点，是因为手机传感器没有相机传感器那么大，所以要靠右一点点，这样前期让画面更亮了，后期拉回来的时候噪点也被拉的更暗了\n- ![](../images/img-20250919211001319.png)\n- ![](../images/img-20250919211012376.png)\n- ![](../images/img-20250919211419854.png)\n\n## 白平衡\n- 后期不方便调整，尽量前期拍摄时候调整到位\n- ![](../images/img-20250919214436527.png)\n- K值越高色温越冷，越低色温越暖\n- 色温表\n- ![](../images/img-20250919214916725.png)\n- 白平衡白平衡，要把白色校准成纯白色（这个过程叫对白），灰色校准成灰色\n- 自己判断出当前的白平衡值之后，会根据自己输入的K值进行适配当前场景真正的色温；但是如果K值高于实际值，会使得画面纠正变暖，如果K低实际值，会使得画面纠正变冷。\n- 另外就是拍视频的时候要关闭自动白平衡，否则会因为场景的变化而导致相机自动调节白平衡，从而导致拍出来的不同场景的白平衡不一样，让后期非常痛苦\n- ![](../images/img-20250919222030293.png)\n- ![](../images/img-20250919222040551.png)\n- ![](../images/img-20250919222142911.png)\n","tags":["标签"],"categories":["目录"]},{"title":"网络多线程","url":"/posts/1021282472.html","content":"\n\n<!-- more -->\n","tags":["标签"],"categories":["目录"]},{"title":"Favorite Songs","url":"/posts/4206195319.html","content":"\n记录一些自己喜欢的歌，但是因为使用的音乐平台众多，所以想直接把名字写下来\n<!-- more -->\n### 回到小时候\n---\n\n### 回到初中的时候\n---\n\n### 世纪初的感觉\n---\n1. 掉了 - 张惠妹\n2. 最熟悉的人 - 萧亚轩","tags":["爱好","音乐"],"categories":["爱好"]},{"title":"Weakness","url":"/posts/2417479868.html","content":"\n\n<!-- more -->\n","tags":["胡言乱语"],"categories":["人生体验"]},{"title":"SpringBoot3","url":"/posts/1432709709.html","content":"SpringBoot3读书笔记\n\n<!-- more -->\n### IOC\n---\n#### IOC思想的引入\n- ![](../images/img-20250802033834788.png)\n**两种实现方式**\n1. 依赖查找 ![](../images/img-20250802193405393.png)\n2. 依赖注入 ![](../images/img-20250802193342507.png)\n- 依赖注入是 “别人给啥用啥”，依赖查找是 “自己找想要的”\n\n**IOC容器基本处理流程**\n- ![](../images/img-20250802195902802.png)\n\n**对比BeanFactory与ApplicationContext**\n- ![](../images/img-20250802200055316.png)\n**BeanFactory与ApplicationContext的特性对比**\n- ![](../images/img-20250802200126082.png)\n**理解Context与ApplicationContext**\n- ![](../images/img-20250802200427916.png)\n- ![](../images/img-20250802200434936.png)\n\n### 注解驱动的IOC\n\n\n\n### 依赖查找进阶和高级\n\n\n### 依赖注入的6种方式\n\n## IOC容器中的Bean\n---\n### Bean的类型\n\n### Bean的作用域\n\n### Bean的实例化方式\n\n### Bean的基本生命周期\n\n## IOC容器的设计与机制\n---\n### BeanFactory\n\n\n### 事件驱动与监听器\n\n### 模块装配\n\n### 条件装配\n\n### 组件扫描机制\n\n### \n\n","tags":["阅读笔记","SpringBoot3"],"categories":["Java","SpringBoot"]},{"title":"有关业余时间","url":"/posts/1552263148.html","content":"\n记录有关人生中对于工作和生活的思考\n<!-- more -->\n# point1️⃣\n---\n作为一个软件公司老板和老程序员，我感到这个问题本身是有很大问题的，换句话说，如果能问出这个问题来，思维上的误区和[死亡螺旋](https://zhida.zhihu.com/search?content_id=610240857&content_type=Answer&match_order=1&q=%E6%AD%BB%E4%BA%A1%E8%9E%BA%E6%97%8B&zhida_source=entity)就已经快形成了。本质就是用焦虑解决焦虑。\n\n公司每一批新人到来的时候，我都会告诉他们一个基本的思考方式和一个基础的[程序思维](https://zhida.zhihu.com/search?content_id=610240857&content_type=Answer&match_order=1&q=%E7%A8%8B%E5%BA%8F%E6%80%9D%E7%BB%B4&zhida_source=entity)方法，程序思维方式就是要建立静态和动态划分的程序思维，这一点我是觉得应该写入到计算机专业学生入门课程中的思维方式。\n\n基本的思考方式是我想说的重点，人生的划分的一个基本角度，工作、生活和学习。所有在公司的思考问题的方式都必须按照这三个领域进行划分。每一个领域的道德逻辑和评判标准，社会形成的一般性认知，自身的成长路径都是不同的。既不能割裂，也不能混为一谈。\n\n**工作**这个领域是大学生们毕业后进入公司才真正体会到的一种全新领域，这一领域从入职开始，贯彻始终一直到退休。内容上既有专业建树，也有日常细碎，既有背锅甩锅，也有光荣成就。但是，就我们公司来说，归结到几个核心概念就是。1、这本质上是个痛苦的领域。吃苦是必然的，不存在快乐工作，要么是吃肉体上的苦，要么是吃心理上的苦。也就是，工作不是费力那就是操心。偶尔点缀着一些成就感和价值感而已。2、价值衡量标准就是薪资。长期看，薪资水平取决于[稀缺程度](https://zhida.zhihu.com/search?content_id=610240857&content_type=Answer&match_order=1&q=%E7%A8%80%E7%BC%BA%E7%A8%8B%E5%BA%A6&zhida_source=entity)，稀缺程度取决于需求和供给的比例。3、提高工作能力的重点是提交效率，也就是付出的同等的时间，产生更大的工作成果。一般来说[团队协同](https://zhida.zhihu.com/search?content_id=610240857&content_type=Answer&match_order=1&q=%E5%9B%A2%E9%98%9F%E5%8D%8F%E5%90%8C&zhida_source=entity)会比单枪匹马的效率更高，但是组织难度非常大。\n\n**生活**这个领域是贯彻人类始终的领域，每个人一出生到死亡，都熟悉这一领域。不管世界怎样改变，生活的本质和特点都不会发生太大的变化。1、生活的目标就是追求幸福，如果生活充满痛苦，那么一个人必须尽快改变生活的方式来调整自己的状态。不存在为了追求幸福而舍弃幸福，要么是伪幸福，要么是违背了生活的本质。2、生活的衡量标准是满足需求过程中，内在的体验的程度，自己鞋子自己穿，舒不舒服自己才知道。必须是不可告人的快乐，而不是在别人面前表演的快乐，即使这种幸福感来自于别人对你的行为。3、生活的重点是不断的满足自己的需求，从简单的肉体到高端的精神等等不一，每个人也是不同的。\n\n**学习**这个领域是人从3岁左右就开始的一种天性，但是很多人会轻易的放弃这一能力领域。1、学习的本质就是自身的成长，如果人停止学习，那么人就会停止成长。2、学习包含身体上的和精神层面上的学习，这两种学习的评价标准并没有什么不同，就是看人有没有在某个领域成长。3、学习的重点就是顺从天性的去做，既要顺从学习这个人类的天性，也要顺从自身特征的天性，也就是找到自己擅长的领域进行学习。另一点就是必须是去做，而不是臆想，幻想一点用没有的。\n\n基于这样的思维方式，我来回答这个问题，程序员空下来该干什么，既然是空闲下来，说明工作已经完成了，首选肯定是生活领域，追求幸福，享受快乐。不断地满足自己的需求。幸福会让人觉得生命有意义，才能缓解人终归要死亡的本质焦虑。其次是去学习，完成某些方面自身的成长。会使你产生获得感。\n\n我为什么说思维误区和死亡螺旋，因为很典型，很多人会试图通过工作来使自己感到幸福，这怎么可能，最多能得到暂时的虚荣和逃避焦虑，这种虚假的感觉一过去，会陷入更深层次的焦虑。然后会更加强迫自己去工作。学习也能带来一种满足，但是如果没有解决生活领域的问题，没有解决基础幸福感的问题，也都是一种替代和麻痹。\n\n除非一种情况，那就是真的能从工作和学习中找到幸福感，这里一定要区分清晰虚荣和幸福，方法也很简单，没有任何人知道，自己也能感到愉快的就是幸福，必须有人知道，自己也能感到愉快的就是虚荣。还要区分[习得感](https://zhida.zhihu.com/search?content_id=610240857&content_type=Answer&match_order=1&q=%E4%B9%A0%E5%BE%97%E6%84%9F&zhida_source=entity)和幸福感，非常像，不太好区分，主要的不同就是学习带来的习得感非常自我，是自我获取到的一种体验，而幸福感大都是别人给自己带来的一种体验。\n\n据我观察，程序员往往不善于和别人交往，生活领域较大缺失，特别容易造成从工作和学习中得到幸福的假象。对于程序员来说，可以说一句矫枉过正的话，只有发生于别人对你所做的行为中，你不可告人的体会到一种快乐，才是真正的幸福。\n\n空闲下来就去生活，因为人生除了生活幸福之外，没有任何意义，抛弃生活这一领域，不管一个人的工作领域和学习领域多么成功和强大，都会或早或晚的崩溃。\n\n顺便说一下，找副业是工作领域的事情，说明主业无法获取让自己满足的收入，如果是自身效率低下，是不是自己做了不适合自己的工作，如果效率足够的高，最佳状态是跳槽到更适合自己的岗位。如果要做兼职，这么说吧，兼职往往是低水平的代名词。\n","tags":["工作","生活"],"categories":["思考","反省"]},{"title":"IO","url":"/posts/2248260274.html","content":"\t\tQA*韩顺平B站IO流课程**\n\n<!-- more -->\n### 目录\n- ![](../images/img-20250713160953931.png)\n- ![](../images/img-20250819093734068.png)\n\n### 文件基础知识\n---\n- ![](../images/img-20250713161119016.png)\n- 输入还是输出是针对内存而言\n\n**常用文件操作**\n- ![](../images/img-20250713170149521.png)\n- tips：一个汉字是**3**个字节\n\n- **文件的删除**\n- ![](../images/img-20250716140207105.png)\n- 目录也是一种文件\n\n### 流的分类\n---\n- ![](../images/img-20250716142759541.png)\n\n### FileInputStream\n---\n- 用于读取文件\n```java\n@Test  \npublic void readFile01() {  \n    String filePath = \"e:\\\\io\\\\hello.txt\";  \n    int readData = 0;  \n    java.io.FileInputStream fileInputStream = null;  \n  \n    try {  \n        // 创建fileinputstream对象用于读取文件  \n        fileInputStream = new java.io.FileInputStream(filePath);  \n        while ((readData = fileInputStream.read()) != -1) {  \n            System.out.print((char) readData); // 转成char显示  \n        }  \n    } catch (IOException e) {  \n        throw new RuntimeException(e);  \n    } finally {  \n        try {  \n            // 关闭文件流，释放资源  \n            fileInputStream.close();  \n        } catch (IOException e) {  \n            throw new RuntimeException(e);  \n        }  \n    }  \n}  \n  \n/**  \n * 读取文件中汉字，用字节数组的形式提高读取效率  \n */  \n@Test  \npublic void readFile02() {  \n    String filePath = \"e:\\\\io\\\\hello.txt\";  \n    byte[] buf = new byte[8]; // 一次读8个字节  \n    Integer readLen = 0;  \n    java.io.FileInputStream fileInputStream = null;  \n    try {  \n        // 创建fileinputstream对象用于读取文件  \n        fileInputStream = new FileInputStream(filePath);  \n        while ((readLen = fileInputStream.read(buf)) != -1) {  \n            System.out.print(new String(buf, 0, readLen)); // 转成char显示  \n        }  \n    } catch (IOException e) {  \n        throw new RuntimeException(e);  \n    } finally {  \n        try {  \n            // 关闭文件流，释放资源  \n            fileInputStream.close();  \n        } catch (IOException e) {  \n            throw new RuntimeException(e);  \n        }  \n    }  \n}\n```\n- 讲解\n> **`FileInputStream.read(byte[] b)` 方法详解**\n1. **功能**\n    \n    - 尝试从文件中读取最多 `b.length` 个字节的数据，并将其存储到字节数组 `b` 中。\n    - 返回**实际读取的字节数**（整数），如果已到达文件末尾，则返回 `-1`。\n2. **执行流程**\n    \n    - **读取数据**：从文件当前位置开始，尝试读取 `b.length` 个字节到数组 `b` 中。\n    - **返回值**：\n        - **正整数**：表示成功读取的字节数（可能小于 `b.length`，例如文件剩余数据不足时）。\n        - **-1**：表示已到达文件末尾（EOF，End of File）。\n    - **文件指针移动**：每次读取后，文件内部的指针会向后移动实际读取的字节数。\n\n\n\n###  FileOutputStream\n---\n- 用于往文件中写入内容\n```java\n @Test  \n    public void writeFile01() {  \n        //创建对象  \n        FileOutputStream fileOutputStream = null;  \n        String filePath = \"e:\\\\io\\\\a.txt\";  \n        try {  \n            fileOutputStream = new FileOutputStream(filePath);  \n            // 写入字节数据  注意，char会自动转成int类型数据  \n//            fileOutputStream.write('B'); // 如果没有文件会自动创建  \n            // 写入字符串  string.getBytes()会自动把字符串转换成字节数组  \n//            fileOutputStream.write(\"hello,world\".getBytes());  \n            fileOutputStream.write(\"hello,world\".getBytes(),3,5); //从第三个开始写入5个字节  \n  \n            // 1. new FileOutputStream(filePath); 当写入内容会覆盖原来的内容  \n            // 2. new FileOutputStream(filePath,true); 当写入内容会追加内容  \n        } catch (IOException e) {  \n            throw new RuntimeException(e);  \n        } finally {  \n            try {  \n                fileOutputStream.close();  \n            } catch (IOException e) {  \n                throw new RuntimeException(e);  \n            }  \n        }  \n    }\n```\n\n### 文件的拷贝\n---\n- ![](../images/img-20250725152504890.png)\n- 源代码\n```java\n// 创建文件输入流，将文件读取到程序  \n// 创建文件输出流，将读取到的文件数据，写入到指定的文件中  \nString filePath = \"C:\\\\Users\\\\user\\\\Pictures\\\\100NZ502\\\\DSC_0002.JPG\";  // 源文件路径\nString targetPath = \"e:\\\\io\\\\copy.jpg\"; // 注意目标指向的一定是一个文件而不是目录  \nFileInputStream fileInputStream = null;  \nFileOutputStream fileOutputStream = null;  \n  \ntry {  \n    fileInputStream = new FileInputStream(filePath);  \n    fileOutputStream = new FileOutputStream(targetPath);  \n    // 定义字节数组提高读取效率  \n    byte[] buf = new byte[1024];  \n    int readLen = 0;  \n    // 一边读取一边写入  \n    while ((readLen= fileInputStream.read(buf))!=-1){  \n        fileOutputStream.write(buf,0,readLen); // 一定要用这个方法，否则会出现读取的字节不够  \n    }  \n    System.out.println(\"拷贝完成\");  \n} catch (IOException e) {  \n    throw new RuntimeException(e);  \n}finally {  \n    try {  \n        if(fileInputStream!=null){  \n            fileInputStream.close();  \n        }  \n        if(fileOutputStream!=null){  \n            fileOutputStream.close();  \n        }  \n    } catch (IOException e) {  \n        throw new RuntimeException(e);  \n    }  \n}\n```\n\n### FileReader FileWriter\n---\n- ![](../images/img-20250726170457836.png)\n- ![](../images/img-20250726170745619.png)\n- 案例\n\t- ![](../images/img-20250726171123365.png)\n```java\n// 单个字符读取\npublic static void main(String[] args) {  \n    String filePath = \"e:\\\\io\\\\story.txt\";  \n    FileReader fileReader = null;  \n    int data = 0;  \n    try {  \n        fileReader = new FileReader(filePath);  \n        // 循环读取并输出  单个字符输出  \n        while ((data = fileReader.read())!=-1){  \n            System.out.print((char)data);  \n        }  \n    } catch (IOException e) {  \n        throw new RuntimeException(e);  \n    } finally {  \n        if(fileReader!=null){  \n            try {  \n                fileReader.close();  \n            } catch (IOException e) {  \n                throw new RuntimeException(e);  \n            }  \n        }  \n    }  \n}\n```\n**改进**\n```java\n// 使用字符数组批量读取\npublic static void main(String[] args) {  \n    String filePath = \"e:\\\\io\\\\story.txt\";  \n    FileReader fileReader = null;  \n    int readLength = 0;  \n    char[] buf = new char[1024]; // 数组长度自拟  \n    try {  \n        fileReader = new FileReader(filePath);  \n        // 循环读取并输出  批量读取 read(buf)返回的是实际读取到的字符数  \n        // 如果返回 -1，说明文件读取结束  \n        while ((readLength  = fileReader.read(buf))!=-1){  \n            System.out.print(new String(buf, 0, readLength));  \n        }  \n    } catch (IOException e) {  \n        throw new RuntimeException(e);  \n    } finally {  \n        if(fileReader!=null){  \n            try {  \n                fileReader.close();  \n            } catch (IOException e) {  \n                throw new RuntimeException(e);  \n            }  \n        }  \n    }  \n}\n```\n\n### 节点流和处理流\n---\n- ![](../images/img-20250726175712823.png)\n- ![](../images/img-20250726175631097.png)\n\n#### 节点流\n--- \n- ![](../images/img-20250726180033917.png)\n\n#### 处理流\n---\n- ![](../images/img-20250726180620421.png)\n\n**BufferedReader**\n```java\nString filePath = \"e:\\\\io\\\\story.txt\";  \nBufferedReader bufferedReader = new BufferedReader(new FileReader(filePath));  \n//读取  \nString line;  \n// 按行读取  \n/*  \n注意这里的readline是按行读取  \n */while ((line = bufferedReader.readLine()) != null) {  \n    System.out.println(line);  \n}  \n  \n/* 关闭流  \n 注意： 这里只需要关闭 BufferedReader，因为底层的会自动去关闭节点流  \n */bufferedReader.close();\n```\n\n**BufferedWriter**\n```java\n String filePath = \"e:\\\\io\\\\a.txt\";  \n//        BufferedWriter bufferedWriter  = new BufferedWriter(new FileWriter(filePath));  \n        BufferedWriter bufferedWriter  = new BufferedWriter(new FileWriter(filePath,true));// 追加写入  \n        bufferedWriter.write(\"输入第一句话\");  \n        // 插入一个和系统相关的换行  \n        bufferedWriter.newLine();  \n        bufferedWriter.write(\"输入第二句话\");  \n        bufferedWriter.newLine();  \n        bufferedWriter.write(\"输入第三句话\");  \n        bufferedWriter.newLine();  \n        // 关闭流  \n        // 注意：关闭外层流即可，底层会自动关闭节点流  \n        bufferedWriter.close();  \n    }\n```\n\n**拷贝**\n```java\nString sourcePath = \"e:\\\\io\\\\a.txt\";  \nString destPath = \"e:\\\\io\\\\a_copy.txt\";  \nBufferedReader br = null;  \nBufferedWriter bw = null;  \nString line ;  \ntry {  \n    br =new BufferedReader(new FileReader(sourcePath));  \n    bw = new BufferedWriter(new FileWriter(destPath));  \n    while ((line=br.readLine())!=null){  \n        // readline 是读取一行写入一行，但是没有换行，所以要手动换行  \n        bw.write(line);  \n        bw.newLine();  \n    }  \n} catch (Exception e) {  \n    throw new RuntimeException(e);  \n}finally {  \n    try {  \n        //关闭外层流  \n        if(br!=null)  \n            br.close();  \n        if(bw!=null)  \n            bw.close();  \n    } catch (Exception e) {  \n        throw new RuntimeException(e);  \n    }  \n}  \n/**  \n * 注意：  \n * BufferedReader或者BufferedWriter是按照字符操作，  \n * 不要去操作二进制文件，可能会造成文件损坏  \n */\n```\n- 实际工作的是节点流处理流只是包装增强功能，关闭流的时候只用关闭bufferedReader，然后他会自动关闭底层的字节流（当前的BufferedReader是包装流）\n- 二进制文件有：图片 声音 视频 \n\n- ![](../images/img-20250816152905643.png)\n\n- ![](../images/img-20250816153221128.png)\n\n**二进制拷贝**\n```java\n/*  拷贝图片 String sourcePicturePath = \"C://Users//Yething//Pictures//Screenshots//cyxxtf.jpg\";   \nString destPicturePath = \"E://io//bufferedCopyPicture.jpg\";*/  \n   //拷贝视频  \n   String sourcePicturePath = \"C://Users//Yething//Videos//5月19日//[DLPanda.com][30就拍鸟的ALLEN LAN]7513506201276976419.mp4\";  \n   String destPicturePath = \"E://io//bufferedCopyVideo.mp4\";  \n   BufferedInputStream bis = null;  \n   BufferedOutputStream bos = null;  \n  \n   try {  \n       // 因为FileInputStream是InputStream的子类  \n       bis = new BufferedInputStream(new FileInputStream(sourcePicturePath));  \n       bos = new BufferedOutputStream(new FileOutputStream(destPicturePath));  \n  \n       // 循环读取文件，并写入到目标位置  \n       byte[] buf = new byte[1024]; //提升读取效率  \n       int readLength = 0;  \n       while ((readLength = bis.read(buf)) != -1) {  \n           bos.write(buf, 0, readLength);  \n       }  \n       System.out.println(\"拷贝完成\");  \n   } catch (IOException e) {  \n       throw new RuntimeException(e);  \n   } finally {  \n       //关闭流，关闭外层流，因为会自动关闭底层的字节流  \n  \n       try {  \n           if(bis!=null){  \n               bis.close();  \n           }  \n           if(bos!=null){  \n               bos.close();  \n           }  \n       } catch (IOException e) {  \n           throw new RuntimeException(e);  \n       }  \n   }\n```\n\n\n\n#### 节点流和处理流的区别和联系\n---\n- ![](../images/img-20250816135707810.png)\n- 用修饰器模式，利用对象动态绑定机制，绑定到对应的实现子类\n\n### 对象流\n---\n- ![](../images/img-20250816155933888.png)\n- ![](../images/img-20250816160108378.png)\n- ![](../images/img-20250816160155431.png)\n- \n- 保存数据的时候把数据类型也保存下来\n\t- 以前是：保存值\n\t- 现在是：保存值和数据类型，比如100是Integer类型\n- ![](../images/img-20250816155624566.png)\n\n```java\npublic class ObjectInputStream_ {  \n    public static void main(String[] args) throws IOException, ClassNotFoundException {  \n        // 指定反序列化的文件  \n        String filePath = \"e:\\\\io\\\\ioObject_Output_Stream.bat\";  \n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filePath));  \n  \n        // 注意：反序列化的顺序要和当初序列化的顺序相同  \n        System.out.println(ois.readInt());  \n        System.out.println(ois.readBoolean());  \n        System.out.println(ois.readChar());  \n        System.out.println(ois.readDouble());  \n        System.out.println(ois.readUTF());  \n        Object dog = ois.readObject();  \n        System.out.println(\"运行类型 = \"+dog.getClass());  \n        System.out.println(\"dog信息 = \"+dog);  \n  \n        //如果需要调用Dog的方法，需要向下转型  \n        Dog dog1  = (Dog) dog;  \n        System.out.println(\"dog1信息：\"+dog1.getName());  \n        // 关闭流，关闭外层流  \n        ois.close();  \n    }  \n}\n  \nclass Dog implements Serializable {  \n    private String name;  \n    private int age;  \n    // serialVersionUID 序列化的版本号，可以提高兼容性，加了下面这个之后不会认为是一个全新的类，会认为是Dog的一个升级版  \n\tprivate static final  long serialVersionUID = 1L;\n    public Dog(String name, int age) {  \n        this.name = name;  \n        this.age = age;  \n    }  \n    @Override  \n    public String toString() {  \n        return \"Dog{\" +  \n                \"name='\" + name + '\\'' +  \n                \", age=\" + age +  \n                '}';  \n    }  \n}\n```\n- ![](../images/img-20250816162809142.png)\n- ![](../images/img-20250816170137173.png)\n- 第六个点![](../images/img-20250816171135919.png)\n\n### 标准输入输出流\n---\n- ![](../images/img-20250817104533840.png)\n```java\npublic class InputAndOutput {  \n    public static void main(String[] args) {  \n        // System类的 public final static InputStream in = null;  \n        // System.in 编译类型 InputStream     \n        // System.in 运行类型 BufferedInputStream   \n        // 表示标准输入 键盘  \n        System.out.println(System.in.getClass());  \n  \n        // System类的 public final static PrintStream out = null;  \n        // System.out 编译类型 PrintStream      \n        // System.out 运行类型 PrintStream      \n        // 表示标准输出 显示器  \n        System.out.println(System.out.getClass());  \n    }  \n}\n```\n\n### 转换流\n---\n- ![](../images/img-20250817105122608.png)\n- ![](../images/img-20250817105804208.png)\n- 把字节流转换成字符流\n- 学IO流最困难的是要知道在什么时候用什么流\n- ANSI是国标码，其他国家也有自己的国标码，是根据当前安装的系统决定是哪个国家的国标码![](../images/img-20250817112052421.png)\n- 出现乱码的原因是没有指定读取文件的编码方式\n- 转换流可以把字节流转换成字符流\n\n正式学习\n- ![](../images/img-20250817112833190.png)\n#### InputStreamReader\n- ![](../images/img-20250817112610432.png)\n- 传入字节流，然后变成字符流，完成字节流到字符流的转换\n- ![](../images/img-20250817112723611.png)\n- ![](../images/img-20250817113054086.png)\n```java\npublic static void main(String[] args) throws IOException {  \n    String filePath = \"e:\\\\io\\\\hello.txt\";  \n    // 把FileInputStream 转成 InputStreamReader    // 指定编码GBK  \n    InputStreamReader isr = new InputStreamReader(Files.newInputStream(Paths.get(filePath)), \"GBK\");  \n    // 把InputStreamReader 转成 BufferedReader    /*    我自己的理解：  \n    把字节流转换成字符流，这里用到了转换流    然后把字符流用包装器来接收之后再读取，但是弹幕说buffer只是让效率变得更高，不用也行\n     */    BufferedReader br = new BufferedReader(isr);  \n    //现在再读取  \n    String s = br.readLine();  \n    System.out.println(\"打印出来的内容： \"+s);  \n    // 关闭外层流  \n    br.close();  \n}\n```\n\n####  OutputStreamWriter\n- ![](../images/img-20250817143944890.png)\n```java\npublic class OutputStreamWriter_ {  \n    public static void main(String[] args) throws IOException {  \n        String filePath = \"e:\\\\io\\\\out.txt\";  \n        String charset = \"utf8\";  \n        OutputStreamWriter osw = new OutputStreamWriter(Files.newOutputStream(Paths.get(filePath)),charset);  \n        osw.write(\"hi,你好编程\");  \n        osw.close();  \n        System.out.println(\"按照\"+charset+\"格式保存文件完成\");  \n        //这里没有用buffer也可以，buffer只是增加效率\n    }  \n}\n```\n\n#### PrintWriter\n- ![](../images/img-20250817145920635.png)\n- 打印流只有输出流\n- ![](../images/img-20250817145944517.png)\n\n\n- ![](../images/img-20250817152023470.png)\n```java\npublic class PrintWriter_ {  \n    public static void main(String[] args) throws IOException {  \n//        PrintWriter printWriter = new PrintWriter(System.out); // 指向显示器  \n        PrintWriter printWriter = new PrintWriter(new FileWriter(\"e:\\\\io\\\\printwriter.txt\")); // 指向显示器  \n        printWriter.print(\"hi,Java你好\");  \n        printWriter.close();  \n    }  \n}\n\n```\n\n### Properties\n---\n- ![](../images/img-20250817162459929.png)\n- ![](../images/img-20250817163953459.png)\n- ![](../images/img-20250817164007149.png)\n- ![](../images/img-20250817164138622.png)\n```java\npublic class Properties_01 {  \n    public static void main(String[] args) throws IOException {  \n        // 传统的读取配置文件的方式  \n  \n        // 读取文件并获取相关数据  \n        BufferedReader br = new BufferedReader(new FileReader(\"D:\\\\WorkSpace\\\\IO\\\\newfile\\\\src\\\\mysql.properties\"));  \n        String line;  \n        while((line= br.readLine())!=null){  \n            String[] split = line.split(\"=\");  \n            System.out.println(split[0]+\"=\"+split[1]);  \n        }  \n        br.close();  \n        System.out.println(\"读取完毕！\");  \n    }  \n}\n```\n\n\n```java\npublic class Properties_02 {  \n    public static void main(String[] args) throws IOException {  \n        // 使用Properties类读取文件  \n        Properties properties = new Properties();  \n        // 加载指定配置文件  \n        properties.load(new FileReader(\"D:\\\\WorkSpace\\\\IO\\\\newfile\\\\src\\\\mysql.properties\"));  \n        // 把 K V显示控制台  \n        properties.list(System.out); // 指定显示到显示器  \n        // 根据 key 获取对应的值  \n        String user=  properties.getProperty(\"user\");  \n        String pwd = properties.getProperty(\"pwd\");  \n        System.out.println(\"用户名：\" + user);  \n        System.out.println(\"密码：\" + pwd);  \n  \n  \n    }  \n}\n```\n\n\n```java\npublic class Properties_03 {  \n    public static void main(String[] args) throws IOException {  \n        Properties properties = new Properties();  \n        // 创建  \n        //1.如果该文件没有key，就是创建  \n        //2.如果该文件有key，就是修改  \n        /*  \n        Properties 父类是Hashtable, 底层就是Hashtable 方法  \n         */  \n        // 使用Properties来创建配置类  \n        properties.setProperty(\"user\", \"汤姆\");  \n        properties.setProperty(\"pwd\", \"121133\");  \n        properties.setProperty(\"ip\", \"127.0.0.1\");  \n  \n        // 将KV 存储在文件中即可  字节流才是unicode码 字符流不是  \n        properties.store(Files.newOutputStream(Paths.get(\"D:\\\\WorkSpace\\\\IO\\\\newfile\\\\src\\\\mysql2.properties\")), \"注释\");  \n        System.out.println(\"保存配置文件成功！\");  \n    }  \n}\n```","tags":["IO流","Java"],"categories":["Java"]},{"title":"网络编程","url":"/posts/4131986683.html","content":"\n\n<!-- more -->\n","tags":["标签"],"categories":["目录"]},{"title":"Linux","url":"/posts/1406167115.html","content":"Linux有关知识点\n\n<!-- more -->\n\n### 目录结构说明\n---\n```plaintext\n/  # 根目录（所有目录的起点）\n├── bin/            # 基础命令（ls、cp 等，所有用户可执行）\n├── sbin/           # 系统管理命令（reboot、ifconfig 等，root 专用）\n├── usr/            # 用户程序和数据（类似 Windows 的 Program Files）\n│   ├── bin/        # 非启动必需的用户命令（如 wget、vim）\n│   ├── sbin/       # 非启动必需的系统命令\n│   ├── lib/        # 程序依赖的库文件\n│   ├── lib64/      # 64位程序的库文件\n│   └── share/      # 共享数据（文档、语言包等）\n├── etc/            # 系统配置文件（服务配置、用户信息等）\n│   ├── sysconfig/  # 系统服务配置（网络、防火墙等）\n│   ├── nginx/      # Nginx 服务配置（示例）\n│   └── passwd      # 用户账号信息\n├── var/            # 动态变化的文件（日志、缓存等）\n│   ├── log/        # 系统和程序日志（如 /var/log/messages）\n│   ├── lib/        # 服务运行数据（如数据库文件）\n│   └── tmp/        # 服务临时文件\n├── tmp/            # 临时文件（重启后清空）\n├── boot/           # 启动文件（内核、grub 引导程序）\n├── dev/            # 设备文件（硬盘、终端等，如 /dev/sda）\n├── proc/           # 虚拟文件系统（实时进程、内存信息等）\n├── sys/            # 虚拟文件系统（硬件设备管理）\n├── lib/            # 系统共享库（类似 .dll 文件）\n├── lib64/          # 64位系统共享库\n├── mnt/            # 临时挂载外部设备（U盘、移动硬盘）\n├── media/          # 自动挂载的外部设备（如光盘）\n├── opt/            # 第三方软件安装目录（如 /opt/redis）\n└── home/           # 普通用户家目录\n    ├── user1/      # 用户 user1 的家目录（等价于 ~）\n    └── user2/      # 用户 user2 的家目录\n└── root/           # root 用户的家目录（等价于 ~，root 专属）\n```\n","tags":["Linux"],"categories":["操作系统"]},{"title":"Redis","url":"/posts/3135569683.html","content":"Redis学习记录\n- [Redis官方文档](https://redis.io/docs/latest/commands/)\n<!-- more -->\n\n### Sql与Nosql区别\n- ![](../images/img-20250712101415422.png)\n- ![](../images/img-20250712101506072.png)\n### Redis简介\n- ![](../images/img-20250712102231830.png)\n### 安装redis\n- 如何看redis是否已经运行  \n\t- ps -ef | grep redis\n\n### Redis的value类型\n---\n- ![](../images/img-20250712153158316.png)\n帮助：在redis-cli中输：`help @`   然后按tab键进行切换\n\n### 常用命令\n---\n- ![](../images/img-20250712155638415.png)\n- 过期时间中 -1是永久存在，-2是已经到期\n\n### String类型\n---\n- ![](../images/img-20250712155847615.png)\n- 常见命令![](../images/img-20250712155910384.png)\n\t- incrbyfloat没有默认增长，后面必须要加增长多少，没有默认增长\n\t- setNx是新增不存在的\n\t\t- `set name zhangsan nx`和`setNx name zhangsan`效果是一样的\n\t- setEx\n\t\t- `setex name 10 Jack`跟`set name Jack  ex 19`效果是一样的\n\t- DEL 删除，并且可以批量删除\n\n#### Key的结构\n---\n- ![](../images/img-20250712161619523.png)\n- ![](../images/img-20250712161658256.png)\n\n### Hash类型\n---\n- ![](../images/img-20250712162223357.png)\n- ![](../images/img-20250712162248829.png)\n- HMset：set的时候可以把键放在前面，然后面直接就是多个kv kv kv\n- HMget：get的时候可以把所有的键写下来，k k k k \n- HgetALL：直接写顶级的，一级key，就能把所有的子集数据展示出来\n- HsetNx：是判断field存不存在，不是顶级key了\n\n### List类型\n---\n- ![](../images/img-20250712164102165.png)\n- BLPOP中的B是block，阻塞的意思\n- ![](../images/img-20250712164821403.png)\n- ![](../images/img-20250712164541380.png)\n- BLPOP的语法是 BLPOP  [key]  [timeout]，就是如果找不到就一直阻塞在那边，如果在阻塞的同时添加一个键进去，那边阻塞立马就会结束并且返回键中的最L值，同理BRPOP也是如此\n\n### Set类型\n---\n- ![](../images/img-20250713100649155.png)\n- ![](../images/img-20250713100944165.png)\n\n### SortedSet类型\n---\n- ![](../images/img-20250713102147526.png)\n- ![](../images/img-20250713102505120.png)\n- 默认升序，ZRank是升序，ZREVRank是降序，加REV是直接在Z后面加的，REV指的是reverse（反转）\n- zcount是针对**分数**score的，zrange是针对**排名**的范围，count是查数量，range是查元素，查人名的\n\n### Redis的Java客户端\n---\n- Redis的Java客户端\n- ![](../images/img-20250713105935049.png)\n\n### Jedis\n---\n- jedis中方法名和redis是一致的\n- ![](../images/img-20250713113838932.png)\n```java\npublic class JedisTest {  \n    private Jedis jedis;  \n  \n  \n    @BeforeEach  \n    void setup(){  \n        //连接  \n        jedis = new Jedis(\"ip\",6379);  \n        //密码  \n        jedis.auth(\"redis\");  \n        //选择库  \n        jedis.select(1);  \n    }  \n  \n    @Test  \n    void testString(){  \n        // 存  \n        String set = jedis.set(\"name\", \"Odyssey\");  \n        System.out.println(\"set = \"+set);  \n        // 取  \n        String name = jedis.get(\"name\");  \n        System.out.println(\"name = \"+name);  \n    }  \n  \n    @Test  \n    void testHash(){  \n        jedis.hset(\"user:1\", \"name\", \"Odyssey\");  \n        String name = jedis.hget(\"user:1\", \"name\");  \n        System.out.println(\"name = \"+name);  \n        HashMap<String, String> map = new HashMap<>();  \n        map.put(\"name\", \"Odyssey\");  \n        map.put(\"age\", \"18\");  \n        map.put(\"sex\", \"男\");  \n        map.put(\"address\", \"中国\");  \n        String hmset = jedis.hmset(\"user:1\", map);  \n        System.out.println(\"hmset = \"+hmset);  \n        Map<String, String> stringStringMap = jedis.hgetAll(\"user:1\");  \n        System.out.println(\"stringStringMap = \"+stringStringMap);  \n        String age = jedis.hget(\"user:1\", \"age\");  \n        System.out.println(\"age = \"+age);  \n    }  \n  \n    @AfterEach  \n    void close(){  \n        if(jedis!=null){  \n            jedis.close();  \n        }  \n    }  \n}\n```\n\n\n### Jedis连接池\n---\n- ![](../images/img-20250713113959889.png)\n```java\npublic class JedisConnectionFactory {  \n    private static final JedisPool jedisPool;  \n  \n    /*  \n    执行机制：静态代码块会在类被加载的时候自动执行，  \n    而且仅执行一次，这确保了连接池会在应用启动时就完成初始化  \n     */    static {  \n        //配置连接池  \n        JedisPoolConfig poolConfig = new JedisPoolConfig();  \n        //最大连接数  \n        poolConfig.setMaxTotal(8);  \n        //最大空闲连接数  \n        poolConfig.setMaxIdle(8);  \n        // 最小空闲连接数  \n        poolConfig.setMinIdle(0);  \n        // 获取连接时的最大等待毫秒  \n        poolConfig.setMaxWaitMillis(1000);  \n        // 创建连接池对象  \n        jedisPool = new JedisPool(poolConfig, \"ip/hostname\", 6379, 1000, \"pwd\");  \n    }  \n  \n    public static Jedis getJedis() {  \n        return jedisPool.getResource();  \n    }  \n}\n```\n\n### SpringDataRedis\n---\n- ![](../images/img-20250713134144625.png)\n- ![](../images/img-20250713134512867.png)\n**快速入门**\n1. 引入依赖（access+driver）![](../images/img-20250713140550237.png)\n2. 编写application.yml配置![](../images/img-20250713135537882.png)\n3. 注入RedisTemplate\n\n### SpringRedisData序列化方式\n---\n- ![](../images/img-20250713141101550.png)\n- key和HashKey使用RedisSerializer\n- value的序列化一般采用GenericJackson2JsonRedisSerializer来序列化\n- 如果没有引入springmvc或者springweb依赖注意要加一个jackson-databind；\n\n- 为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。\n- ![](../images/img-20250713151851315.png)\n\n### StringRedisTemplate\n---\n- ![](../images/img-20250713151959972.png)\n- ObjectMapper是用SpringMVC中自带的序列化工具，也可以用FastJSON\n- 现在保存到数据库之前要手动序列化，然后读取的时候要手动的反序列化\n```java\n@Autowired  \nprivate StringRedisTemplate stringRedisTemplate;\n\nprivate static final ObjectMapper objectMapper = new ObjectMapper();\n\n    @Test  \n    void testSaveUser() throws JsonProcessingException {  \n        // 写入  \n//        redisTemplate.opsForValue().set(\"user\",new User(\"OdysseyChan\",17));  \n        User u = new User(\"张三\", 17);  \n        // 手动序列化  \n        String json = objectMapper.writeValueAsString(u);  \n        stringRedisTemplate.opsForValue().set(\"user:200\",json);  \n        // 获取数据  \n        String jsonUser = stringRedisTemplate.opsForValue().get(\"user:200\");  \n        // 手动反序列化  \n        User user = objectMapper.readValue(jsonUser, User.class);  \n        System.out.println(\"user = \" + user);  \n    }\n```\n- 整个测试类\n```java\n@SpringBootTest  \nclass RedisDemoApplicationTests {  \n  \n    @Autowired  \n    private RedisTemplate redisTemplate;  \n    @Autowired  \n    private StringRedisTemplate stringRedisTemplate;  \n  \n    @Test  \n    void testRedisTemplate() {  \n        //写入  \n        redisTemplate.opsForValue().set(\"name\", \"OdysseyChan\");  \n        //读取  \n        Object name = redisTemplate.opsForValue().get(\"name\");  \n        System.out.println(\"name = \" + name);  \n    }  \n  \n    private static final ObjectMapper objectMapper = new ObjectMapper();  \n  \n    @Test  \n    void testSaveUser() throws JsonProcessingException {  \n        // 写入  \n//        redisTemplate.opsForValue().set(\"user\",new User(\"OdysseyChan\",17));  \n        User u = new User(\"张三\", 17);  \n        // 手动序列化  \n        String json = objectMapper.writeValueAsString(u);  \n        stringRedisTemplate.opsForValue().set(\"user:200\", json);  \n        // 获取数据  \n        String jsonUser = stringRedisTemplate.opsForValue().get(\"user:200\");  \n        // 手动反序列化  \n        User user = objectMapper.readValue(jsonUser, User.class);  \n        System.out.println(\"user = \" + user);  \n    }  \n  \n    @Test  \n    void testHash() {  \n        stringRedisTemplate.opsForHash().put(\"user:300\", \"name\", \"刘能\");  \n        stringRedisTemplate.opsForHash().put(\"user:300\", \"age\", \"18\");  \n  \n        Map<Object, Object> entries = stringRedisTemplate.opsForHash().entries(\"user:300\");  \n        System.out.println(\"entries = \" + entries);  \n    }  \n}\n```\n\n### 总结\n---\n目前Redis这里先是从redis的基础语法包括String 、Hash、List、Set、SortedSet，学习了解如何存取并且设置存活时间，接着学习在Java项目中使用jedis和lettuce进行操作存取，然后学习了使用jedis连接池来获取jedis对象，最后使用SpringDataRedis来进行操作redis，其中包括为避免序列中存储的额外开销而使用StringRedisTemplate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["数据库","Redis"],"categories":["数据库"]},{"title":"Java开发细节","url":"/posts/496186698.html","content":"主要记录一些开发过程中第一次遇到的知识点，但是之后可能还会需要用到的，所以记录下来供以后查阅\n\n目前所有目录层级都用三级井号来标识，方便后期分类整理\n<!-- more -->\n\n### MybatisPlusX\n- 首先就是可以在mapper接口上alt + enter生成xml文件，但是少了许多内容，不如直接一开始生成的时候直接生成出来，也省事，这种方法只适合补救一开始没有生成的时候的锅\n- ![](../images/img-20250709163347430.png)\n- ![](../images/img-20250709163329120.png)\n**自动生成增删改查的方法前缀**\n- 自动生成查询-----写select关键字，\n- 自动生成新增-----写insert关键字\n- 自动生成修改-----写update关键字\n- 自动生成删除-----写del关键字- \n\n### Java基础知识点\n- Java中stream流中的map可以看成是一个转换器，把一个转换成另一个的转换器\n- noop是指在计算机编程中的一种操作或者函数，通常用来表示一个空操作（no operation）\n- static：\n\t- 静态方法属于类本身，并非类的某个实例。因此，调用静态方法时不用先创建类的对象。这一特性在工具类的场景中十分实用\n\n### IDEA快捷键\n- ctrl alt 左键 点住查看实现类\n- CTRL P 查看参数提示\n\n### 父子类之间的接收问题\n- ![](../images/img-20250816113423120.png)\n\n\n### 抽象类知识点\n- ![](../images/img-20250816142742205.png)\n\n\n\n","tags":["Java"],"categories":["Java"]},{"title":"Java学习笔记","url":"/posts/2072697129.html","content":"\n对Java进行查漏补缺\n<!-- more -->\n![](../images/img-20250706151045512.png)\n- JIT编译器运行之后把字节码对应的机器码保存下来下次用![](../images/img-20250706151331722.png)\n\t![](../images/img-20250706151519878.png)\n- 编译和解释型\n\t- 编译型：把源代码翻译成机器码，开发效率慢，执行速度快。常见的编译性语言有 C、C++、Go、Rust\n\t- 解释型：一句一句把代码解释成机器代码再执行，开发效率快，执行速度慢。常见的解释性语言有 Python、JavaScript、PHP\n\n\n\n\n\n## 函数式编程\n---\n### Lambda表达式\n- 使用条件：只有一个抽象方法的匿名内部类（匿名内部类是一个接口，并且这个接口里面只有一个抽象方法需要重写）\n- 内部类方法优化成lambda表达式方法：内部类方法中把括号和方法体部分剪切下来，把内部类整个都删了然后粘贴刚刚复制的括号和方法体，在括号和方法之间加一个向右的箭头\n- ![](../images/img-20250710161626447.png)\n- **将内部类写法变成lambda表达式写法**  点击内部类然后快捷键 alt enter\n- ![](../images/img-20250710165350053.png)\n- **把lambda表达式转换成原来内部类的写法**\n- ![](../images/img-20250710165708229.png)\n\n\n# Spring Cloud Alibaba\n- 主要围绕服务通信和服务治理两方面，主要关注三件事：服务注册，服务发现，健康检查机制\n- Nacos主要是服务管理、注册中心，配置中心，","tags":["Java"],"categories":["Java","笔记"]},{"title":"Spring Security学习","url":"/posts/122562275.html","content":"记录安全框架Spring Security学习\n\n<!-- more -->\n# \n## 登录校验流程\n![](../images/img-20250706143637159.png)\n\n## 完整流程\n![](../images/img-20250706144651107.png)\n三个过滤器分别是：认证，异常处理，授权\n- 认证流程\n- ![](../images/img-20250710155343440.png)\n- 登录验证时序图\n![](../images/img-20250706145445256.png)\n- 思路分析\n- ![](../images/img-20250706153240484.png)\n- **密文格式解析**（以`$2y$10$`开头的标准格式为例）：\n- `$2y$`：算法标识（BCrypt 的版本）。\n- `10`：哈希迭代次数（影响加密强度，数值越大越耗时但更安全）。\n- `eZ6jT65J5dL6`：随机生成的盐值（长度通常为 22 个字符）。\n### 为什么相同明文加密结果不同？\n\n1. **盐值随机生成**：  \n    每次调用 BCryptEncode 时，算法会自动生成一个新的随机盐值。例如，两次加密 “123” 时，盐值可能分别为`eZ6jT65J5dL6`和`aB3kL9mN7pQ2`，与明文结合后计算的哈希结果自然不同。\n2. **盐值包含在密文中**：  \n    密文本身携带了盐值，因此验证密码时无需额外存储盐值 —— 算法会从密文中提取盐值，再与用户输入的密码结合，重新计算哈希并与密文中的哈希值比对。\n\n- Session无法在集群模式下使用\n- 因为原生 Session 依赖单服务器存储，无法跨服务器共享数据。但通过**Session 粘性**或**分布式 Session 存储**等方案，可在集群中正常使用 Session，实现用户会话状态的管理。\n- **建议**：在现代分布式系统中，优先采用共享存储（如 Redis）实现分布式 Session，既能解决集群环境的兼容性问题，又能提升系统的可扩展性和可靠性。\n\n## 定义JWT认证过滤器\n- ![](../images/img-20250709104511083.png)\n\n**名词解释**\n```java\npublic class UsernamePasswordAuthenticationToken extends AbstractAuthenticationToken {  \n    private static final long serialVersionUID = 550L;  \n    private final Object principal;  \n    private Object credentials;\n```\n- principal：\n\t表示身份验证的主要标识，比如用户登录时的用户名或用户对象。\n\t由于它是 final 的，因此在构造函数中初始化之后就不能再改变了，保证了其不可变性。\n- credentials：\n\t表示身份验证的凭据，例如用户的密码。\n\t它不是 final 的，意味着可以在后续过程中被修改或清除（例如在认证成功后清除密码）。\n\n**三种不同的Ant匹配模式**\n![](../images/img-20250709140439366.png)\n1. hello路径下允许所有路径的访问吗\n2. `anonymous()` 方法用于配置**匿名访问规则** ，允许未认证（未登录）的用户以匿名身份访问匹配的 URL 。\n**tips：**\n- **permitAll**：完全公开，谁都能看。\n- **anonymous**：只给没登录的人看，登录后就不能看了。\n- **authenticated**：必须登录，没登录就不让看。\n\n\n# 授权\n主要做两件事：\n- 限制访问资源所需权限\n- 将权限封装到authentication中\n\n# 从数据库中查询权限信息\n- **RBAC权限模型**\n- 基于角色进行控制\n- 分为五张表张表：用户表、权限表、角色表、用户角色管理表、角色权限管理表![](../images/img-20250709155734696.png)\n- 角色表：把权限分为一组一组，不同的角色有不同的权限组，避免用户量大的时候，减少用户表和权限表之间权限管理繁琐 \n\t- 一个角色有多个权限，但一个权限也有多个角色，是一种多对多的关联关系，所以要有一个多对多的角色权限关联表\n- 我自己的感受就是，一个人的所有角色可以用一个字段保存，保存成一个字符串，取出来的时候把不同的角色用不同的符号间隔取出，做一个关联子表的好处可能就是不用在代码层面上间隔取出来，而是转为在数据库中直接查询出所有的数据并且返回为List格式就行了，但是我刚刚ai了一下，多对多的两个表如果不用中间表的话会造成数据的冗余和数据记录数压力大的问题，这跟我一开始对于数据是否在代码层面间隔取出作为list的看法其实并不是重要因素，反而是数据量大的因素更会造成不可估计的系统压力。\n- 这个地方比较难理解的就是关联表维护多对多数据模型的优势\n- 另外权限表一般命名为menu表，可以理解为把所有的功能作为一个菜单保存\n\n# 自定义异常处理\n![](../images/img-20250709165113294.png)\n1. 继承并实现处理这两个异常处理接口![](../images/img-20250710095949765.png)\n2. 添加这两个异常到SecurityConfig中![](../images/img-20250710100516458.png)\n\n# 跨域\n1. 重写spring提供的WebMvcConfigurer接口的addCorsMappings方法\n2. 设置security运行跨域访问\n\n# 自定义权限校验方法\n1. 自定义表达式组件并给组件命名\n```java\n@Component(\"aaa\")  \npublic class MyExpressionRoot {  \n    public boolean hasAuthority(String authority) {  \n        // 获取当前用户的权限  \n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();  \n        LoginUser loginUser = (LoginUser) authentication.getPrincipal();  \n        List<String> permissions = loginUser.getPermissions();  \n        //判断用户权限集合中是否存在authority  \n        return permissions.contains(authority);  \n    }  \n}\n```\n2. @组件名进入使用\n```java\n@PreAuthorize(\"@aaa.hasAuthority('system:dept:list')\")  \npublic String test()  \n{  \n    return \"你好世界\";  \n}\n```\n- 目前authentication中包含的东西![](../images/img-20250710145543645.png)\n\n# CSRF\n- 跨站请求伪造，web常见攻击\n- 如果不关闭的话，除了校验自己做的token，还会校验CSRF的token\n\n# 知乎好文讲解\n![](../images/img-20250708101247955.png)\n- 补充：A（service） <---  B（serviceImpl）主要是强调一个指向关系（虚线空心箭头），子指向父\n![](../images/img-20250708103327542.png)\n- Principal是谁在访问的“身份标识”，继承他就会贴上一个身份标签，继承后类就会被安全框架自动识别，无需额外配置，主要包含名称、权限、凭证\n\n\n\n\n\n\n\n\n\n","tags":["Java","项目笔记"],"categories":["Spring","Java","笔记"]},{"title":"养生","url":"/posts/2634996229.html","content":"\n写一些关于养生的话题\n\n<!-- more -->\n\n# 放松肌肉\n---\n\n**头颈拉伸**\n\n右手举过头顶，将头部向右侧拉动，反复几次，换左手重复动作。\n\n**肩部拉伸**\n\n左手将伸直的右手托起平举，向左拉伸，换手重复动作。\n\n**胸部拉伸**\n\n双手平举，做扩胸运动。\n\n**二头肌拉伸**\n\n手臂侧平举，手扶住墙角或者任何够高的支撑物，转动上身，坚持10～15秒。\n\n**三头肌拉伸**\n\n用一只手抓住另一只手的肘关节，轻推且越过身体，直到手触摸到后背。\n\n**臀肌拉伸**\n\n左腿放在右腿上，保持弯曲。尽力让左腿触碰胸部，向左扭转身体，眼睛尽力看向左肩。\n\n**大腿外侧拉伸**\n\n被拉伸的大腿向斜后方伸出，小腿与脚的外侧面着地，另一侧的大腿做前弓步、膝关节屈曲，双手扶地支撑。拉伸时，身体重心移向被伸拉的一侧。\n\n**四头肌拉伸**\n\n单脚站立，身体保持直立。一手扶墙保持平衡，另一只手向上拉同侧脚尖。\n\n**小腿拉伸**\n\n一条腿向前跨一大步，另一条腿不动，身体前压 。\n\n**上背拉伸**\n\n直立，双手抓住与腹部齐高的扶手，后背反复弓起、下压。\n\n**下腰拉伸**\n\n仰卧，双腿弯曲，双手抱起小腿，尽量向胸部拉伸。重复10次，每次30秒。\n\n做拉伸运动要注意拉伸时身体放松，以肌肉、肌腱、韧带有轻微拉动感为宜；每个动作最好持续30秒以上，每组间隔15～30秒；深呼吸有助于将富含氧气的动脉血液输送至酸痛的肌肉部位。\n\n ","tags":["健康","锻炼"],"categories":["养生","锻炼"]},{"title":"生活大挑战","url":"/posts/2085301975.html","content":"记录自己的最速或者最佳挑战\n\n<!-- more -->\n\n# 2025\n\n## 7月份\n---\n- [x] 准备明天的会议\n","tags":["挑战"],"categories":["计划"]},{"title":"加强学习","url":"/posts/151821141.html","content":"写一些关于有关学习或者学习中带来的思考\n\n<!-- more -->\n\n# 关于学习\n1. 如果想好了做一件事就认真去做，做的过程中不去思考事情以外的事情，无论能不能做好，态度不可以懈怠，学习的过程中要不断的精进自己的学习方法，在学完这件事的时候总结学习方法并不断精进自己的学习方法。\n\n# 学习方法\n1. 不断的思考对比总结 思考对比总结\n2. 做什么事情都不能一直死做，要不断的切换角度 切换次序 甚至颠倒过来研究如何能更好更快的完成事情\n3. 知道怎么学比从哪学更重要\n4. \n","tags":["胡言乱语","学习","尝试"],"categories":["学习"]},{"title":"React博客学习笔记","url":"/posts/2317628258.html","content":"React博客学习笔记\n\n<!-- more -->\n\n- ![](../images/img-20250606223050730.png)\n \n\t如果你遇到以下情况，建议使用 getPopupContainer：\n\t下拉菜单被截断或无法完整显示\n\t使用了 CSS transform, filter, clip-path 等影响定位的属性\n\t使用了 position: fixed 或响应式布局，需要控制层级关系\n\n- ","tags":["React","项目笔记"],"categories":["笔记"]},{"title":"《新摄影笔记》","url":"/posts/1860912074.html","content":"有感而发记录一些对摄影有帮助的句子\n\n<!-- more -->\n- 在平凡中拍摄到不凡的瞬间\n- 一直追求的目标：**在平凡中拍摄到不凡的瞬间**\n- 记录的场景可以让别人看了之后感受到同样的触动\n- 确立画面主题，可以用放大的效果去掉周边复杂的元素，达到自然裁切\n- 拍摄时候把光圈开到最大用虚化来让画面虚实结合、主体清晰、环境虚化，这样更容易突出主体\n- 构图上把人物放在左侧三分之一处，让人更容易看到主体\n- 拍摄照片做到：\n\t- 有一个值得记录的主题\n\t- 通过摄影技巧将这个主题记录好\n- 记住：**摄影就是记录下您到达并发现的、触动您内心的场景及瞬间。**\n- 把摄影技巧分为了4个方面：取景、曝光、虚实及构图\n- **取景**：把摄影技巧分为了4个方面：取景、曝光、虚实及构图\n\t- 取景时我们要注意取景内容、取景范围、取景时机及取景角度。\n\t- 取景决定了画面中有哪些元素，以及画面中每个元素的状态。取景将是您在摄影中需要一直学习的内容，是最难的和最重要的。\n- **曝光**：简单说就是一张照片的明暗。说的复杂一点，就是控制照片中各个元素的色彩与明暗。\n\t- 点测光，顾名思义，就是只对一个点进行测光，该点通常和对焦点在同一个位置，（其实是一个非常小的区域而已，不是完全的点）\n\t- 拍摄模式 \n\t\t- M档：手动曝光（可以调节各参数来达到更理想的创作）\n\t\t- A档：光圈优先（光圈可以人为手动控制，而快门相机会自动计算）\n\t\t- S档：快门优先（快门可以人为手动控制，而光圈相机会自动计算）\n\t\t- P档：程序自动（不会调参数时，可以先玩P档）\n\t- 测光：相机对拍摄话画面的明暗进行测量，以此来调整曝光参数达到比较理想的曝光。\n\t- \n- ![](../images/img-20250525173203610.png)\n\n# 取景\n---\n- 焦距\n\t- ![](../images/img-20250525173728561.png)\n\t- **超广角**焦距一般指的是24mm以下的焦距\n\t\t- 适合拍摄大场景，建筑啊、风景啊。也适合在狭小空间内部拍摄，能把小空间拍摄得“很大”​\n\t- **标准广角：** 24~28mm\n\t- **一般广角：** 35mm被称为“大师的焦距”​，也被称为“人文眼，拍摄人文题材的合适焦距\n\t- **标准镜头：** 50mm焦距近似人眼的透视效果，适合拍摄人文照片，同时一般光圈较大，能有很好的背景虚化效果\n\t- **人像镜头：** 85mm；有很好的背景虚化效果，很好的画面裁切能力，还能保持和模特之间有适当的“交流”距离。其实很多焦距(55~135mm)都可以拍摄人像，当然，用85mm焦距拍摄人像，尤其是拍特写会很好看。另外，可能因为85mm焦距的镜头除了适合拍摄人像，在其他方面并不是很擅长吧，所以被称为人像镜头\n\t- **超广角变焦镜头：** 指的是从11mm、12mm、14mm、16mm、18mm这样的超广角焦距“起跳”​，直到24mm、35mm这样的焦距截止的镜头，可以实现超广角到一般广角不同焦距的变化。比如较为常见的16-35mm镜头\n\t- **标准变焦镜头：** 指从24mm或者28mm起跳，直到70mm、85mm、105mm、120mm截止的镜头 ;常见的两种题材——风光（广角拍摄）和人像（中焦）​，所涉及的焦距都涵盖在内。大家熟知的24-70mm镜头就属于这个范畴。\n\t- **长焦镜头：** 200mm和300mm就是妥妥的长焦镜头了，可用于拍摄鸟类啊，荷花啊，运动物体啊，那种离得不是很远的就可以“打”得到了。所以这种焦距的镜头也被称为望远镜头或者摄远镜头，多用于拍摄远处的景物。\n\t- **超长焦镜头：** 300mm焦距以上的镜头，适合拍摄野生动物、运动题材等。也适合拍日出、日落，满月、弦月等的特写。\n\t- **超长焦变焦镜头：** 超长焦变焦镜头一般指的是从150mm、200mm起，直到500mm、600mm截止的镜头。这类镜头适合拍摄远的景物。较常见的就是拍野生动物题材了。\n- 最后注意，焦距和题材没有绝对的关系！\n\n- 由于APSC画幅的传感器小，所以同样的镜头得到的视角等于是从原来的视角里面剪出来一块。所以等效焦距会变长。\n- 200mm变成300mm是因为我们乘了1.5的焦距转换系数。对APS-C画幅来说，除了佳能相机是×1.6，其他品牌的相机都是×1.5，松下和奥之心（原奥林巴斯）的M/43系统是×2，因为传感器更小，所以等效焦距会变得更长。\n- 实际焦距×焦距转换系数=35mm焦距等效焦距\n- 简单总结如下。\n\t- (1)全画幅相机只能用全画幅镜头。\n\t- (2)全画幅镜头既可以用在全画幅相机上，也可以用在半画幅相机（APS-C画幅相机的俗称）上\n\t- (3)可换镜头上面标注的焦距都是实际焦距。全画幅镜头和半画幅专用镜头都是如此。\n\t- (4)只要是半画幅机身，不管用什么镜头，就一定要通过焦距转换系数来求得等效焦距。\n\t- (5)全画幅系数是1，就是不需要计算，等效焦距就是实际焦距。\n\t- 尼康、索尼、宾得、富士半画幅相机的焦距转换系数是1.5。\n\t- 佳能半画幅相机的焦距转换系数是1.6。奥之心和松下的M/43系统是乘2。\n- 为什么说全画幅相机只能用全画幅镜头呢？以佳能相机为例，APS-C相机的镜头后组大，往往装不进全画幅机身，硬装进去可能会损坏相机。而索尼和尼康相机的则可以装进去，但是相机会变成APS-C画幅模式，传感器外面一大圈不起作用。如2400万像素的全画幅，可能就会变为1100万像素的半画幅。这多么浪费。也有一些APS-C的镜头像场比较大，在全画幅机身上使用就会有一些暗角，但是这种镜头数量不多。\n- 中画幅相机的电子传感器比135全画幅的更大，所以焦距转换系数比1还要小。\n- 当我们说到焦距与题材的时候，说的都是35mm等效焦距或者说135等效焦距。\n\n\n# 透视\n\n---\n\n经常有人问我有关“画面深度”​“景物似乎拉近了”之类的。很多“半懂不懂”的话，不知道他们是被什么影响了，但是在我看来这根本说的就是透视这件事。\n\n我们常听说用广角镜头拍摄会有空间感，用长焦镜头拍摄几乎没有空间感。广角镜头可以让画面有很强的纵深感，而长焦镜头会让画面看起来更加扁平。其实这个说法也不对。到底是怎么回事呢？那就要说到现在要讲的这个知识点——透视。什么是透视呢？简单说就是“近大远小”​。\n\n近大远小这样的透视效果，拍摄距离越近则越明显。当我们使用广角镜头拍摄时，我们往往会离拍摄的主体比较近。正是因为离得近，所以透视效果明显，近大远小明显。在画面中近的东西会变得更大，远的东西会变得更小。\n\n相反，当我们使用长焦镜头拍摄时，我们往往会离拍摄的主体比较远。正是因为离得远，所以透视效果不明显，近大远小不明显。在画面中近的东西会变得没那么大，远的东西也会变得没那么小，因此更趋近于真实的比例。\n\n这也说明了焦距与透视的一些间接关系：因为使用广角镜头拍摄往往离得近，所以透视效果明显；因为使用长焦镜头拍摄往往离得远，所以透视效果不明显。\n\n在拍摄建筑物的时候，您往往会发现建筑物底部大、上部小，原本方形的建筑总会变成梯形。其实这也是透视效果造成的。建筑物底部离您近，而上部离您远——因为一般都是在地面上仰拍，所以离您近的显得大，离您远的显得小。\n这一点从这张照片更容易看出来。一座桥离您近的地方左、右两个桥墩彼此间距还离得远一些，离您远的地方两个桥墩逐渐聚拢。\n\n\n\n\n\n\n\n\n\n\n\n\n# 图\n---\n- ![](../images/img-20250525193423022.png)\n- ","tags":["摄影","读后感"],"categories":["阅读"]},{"title":"关于最近的牛马生活","url":"/posts/1556965081.html","content":"记载一下最近几天的工作烦心事\n\n<!-- more -->\n2025-05-20\n- 这几天工作中遇到了很多烦心事，主要是还是老板情商低嘴下不留情，不指导工作然后一直用各种话语刁难我跟同事，反感。\n- 原本打算说很多的，但是都是情绪没有排泄的缘由，仔细说其实就是工作人遇到的一些挫折困难；通过今天的挫折，我越发想提前学习技能知识早点跑路，今天的事情就这样过去吧，多做对自己有用的事情。暂时的计划就是：先苟着，然后快速提升自己的干活能力，只要干活快了才有时间提前完成任务再做自己的事情，然后自己的时间就用来学技能知识提高干活速度，最后就是学习yan的东西。\n\n2025-05-22\n- 今天又是难受的一天，老板又说话tm的跟sb一样，真是想走了。然后矛盾在现在还要继续赚钱打工，然后还要表现出一副讨好不膈应的状态和表情。累啊，真是tm的c蛋，行走江湖给人打工真是受不了被老板莫名其妙的一顿叼，真是sb老板。现在只想感觉多学点早点跑路。\n\n2025-06-05 20:56\n- 生活已经来到了六月，时间过去的是真快，工作上打算先走一步看一步，经历过这几年这么多事情之后，对当下很多的事情其实就是走一步看一步的心态，也许有时候会对生活有些惋惜，但是那终将是过去，早点从情绪中走出来并寻求新的办法才是当下所要做的事情。\n- 这一个月算是关键的一个月了，技术要学，可能工作也要换，但是不怕，竹杖芒鞋轻胜马，谁怕，一蓑烟雨任平生！\n\n2025-06-06 21:17\n- 又开始了些许害怕，害怕自己不思进取，害怕自己前途黯淡。算了，路还是要走的，多多提醒自己，人在路上心在路上；只是想让自己走的踏实，而不是每一步都是为了别人而走，要为自己活着，为自己而进取。\n- 佩服那些能把不喜欢的事情变成喜欢的，把不擅长的变成擅长的那些人\n\n2025-06-11 00:33\n- 在公司这段时间感觉有点被驯化了的样子，逐渐意识到社会的真实的一面，现在如果没有技术、没有钱权名利，是怎么也抬不起头的，没有学校里面唯分数论那样只看自己的成绩了；现在是愈来愈意识到自己的渺小，逐渐看到职场的另一套玩法，一种互相交换和对冲的职场。现在，理想的想法就是：学习职场那一套，社会那一套，在外面玩社会上的那套，在家可以真正的做自己。也许我上述所说的并没有什么值得颇为惊人的，但是这对于我的思想又是一种冲击。我也不想自己因为钱把自己变成一个纯粹的只为金钱的人。反而是愈发经历这些事，越感受到自己和社会的距离，感受到一种思想的撞击，而我又是害怕巨大变化的人，是一个感性的人。现实就像一只老虎一样撕碎我对生活的幻想，让我感受到社会真正追捧的东西。而我也要把自己伪装成一个战士出来迎接迎面的撞击。\n\n2025-06-24 23:27\n- 今天老弟回家了，剩下的生活又要靠自己去打拼了，今天想明白一件事：生活就是不断在求稳和求进之间来回轮转，生活不是直线上升的，而是螺旋的，所以后面的生活还是得靠自己慢慢拼\n- 锻炼自己绝对冷静的能力，对生活中每一件事都平静，平静是把生活的利器，是自己的后备隐藏能源\n\n2025-06-29 14:54\n- 先礼后兵，不要上来就带着情绪\n- 而且情绪要得当作一种最后的最后的武器来使用，如果有其他的办法还是思考着解决问题，不能习惯用情绪去沟通\n\n\n","tags":["工作","胡言乱语"],"categories":["工作"]},{"title":"相机那些事","url":"/posts/2087953278.html","content":"收集一些关于Z502的tips\n\n<!-- more -->\n![](../images/5f0d9be982cb377731b364de81273f3c.png)\n![](../images/a091cd11c2eadb62278fa978ce58573e.png)\n![](../images/8d3fa520858ca03d28150e0ecfee4eb5.png)\n![](../images/037507638b77e82526f715f3dd1b5ac2.png)\n![](../images/b904b50a8e6cf7495483a8a62ccf9ff2.png)\n\n![](../images/b5fdb217ff3f4070bcf463dc6011e898.png)\n\n![](../images/10cbdfcf15b3deddc11e12ecc8f82f67.png)\n\n![](../images/c97b54ccea9a23de48cd34dfc45c6ded.png)\n\n![](../images/7549fd6474a663c7a6db0ecf22ea53f2.png)\n\n![](../images/9deb14d461ac3f1ba3e6c538663109ef.png)\n\n![](../images/7d5772022bd90152fdd8e05eaee41298.png)\n\n![](../images/b27abb44941d26236da588a8af01365f.png)\n\n![](../images/d239827ef231a2f9ef11f30cab095908.png)\n\n![](../images/img-20250529132105544.png)\n\n![](../images/img-20250529132404859.png)\n\n# 背带\n---\n![](../images/img-20250526080544331.png)\n\n","tags":["相机","尼康","Z50II"],"categories":["相机"]},{"title":"Plans For Shopping","url":"/posts/66236015.html","content":"\n费钱计划\n\n<!-- more -->\n~~1. 铭凡um790Pro （16+1T）~~\n~~2. 显示器~~\n~~3. 键鼠套装~~\n~~4. 读卡器~~\n5. 闪迪内存卡256G\n~~6. 佳能R10~~ 这个没买，镜头太贵，改买尼康Z50II了，加了一个16-50的唯卓士的z口镜头\n~~7. 50mm小痰盂~~ \n~~8.小喇叭~~\n~~9.","tags":["购物","相机","电脑"],"categories":["计划","购物"]},{"title":"Plans for 2025","url":"/posts/3838745332.html","content":"\n2025年升级清单(制定的有些晚)\n\n<!-- more -->\n# 五月\n---\n1. 学会React基础知识   \n2. ","tags":["年度期待","Planning"],"categories":["年度"]},{"title":"国补下单能手","url":"/posts/66500121.html","content":"\n趁着国补和618活动前夕买了mini主机、键鼠和显示器\n<!-- more -->\n\n一共消费三千大米\n# 商品图\n- ![](../images/img-20250519002400626.png)\n- 买了主机但是不能老蹭公司电脑用，还得自己搞一个屏幕才行，所以又买了个屏幕，说实话比我公司的那个屏幕好，物超所值\n- ![](../images/img-20250519002537646.png)\n- 帮同学做了个单子赚了点米，又想着买一个只用插信号接收器就能控制键鼠同时用哪个设备的，方便从mini主机切换到笔记本电脑上\n- ![](../images/img-20250519002731973.png)\n- 刚拿到手的时候震撼的是这个键盘感觉就只有一块板，薄的闻所未闻，但是用下来发现可以手掌一直放在桌面上，不用把手掌抬起来用，还是非常舒服的，加上这个鼠标也不错，不愧是九十多的键鼠。这个键鼠买的按理说其实算贵了，但是自己可能由于稍微赚了点饭钱就觉得赚的钱不用白不用，造成一个消费观念被扩容的错觉。\n# 总结\n--- \n- 有了这套装备以后就可以回来继续学习了，也可以给老弟学剪辑啥的用。然后成本也真是三千，相对于花2999买一个16+256的Macmini还是划算不少的；\n- mini主机到我写文章为止已经有两次断电强制关机了，这是让我最心疼的地方；\n- 这个显示器看评论说不行，拿到手看还是OK的，就是不知道能撑多久；","tags":["数码产品","国补"],"categories":["购物"]},{"title":"改善驼背","url":"/posts/1791899237.html","content":"\n以下内容均为GPT生成\n\n<!-- more -->\n\n\n## ✅ **一、背部肌肉锻炼（增强“拉”的力量，改善含胸）**\n\n---\n![](../images/img-20250511210906490.png)\n### 1. **俯身飞鸟（Reverse Fly）**\n\n- **作用**：锻炼上背部（菱形肌、斜方肌中部），改善肩胛外展、含胸。\n    \n- **做法**：\n    \n    1. 双手持哑铃或水瓶，身体微微前倾，背打直，膝微屈。\n        \n    2. 双手从胸前向两侧张开，类似鸟展翅。\n        \n    3. 手肘微弯，感受肩胛骨收缩。\n        \n    4. 控制节奏慢下慢放。\n        \n- **次数**：10~15次 / 3组。\n    \n- **注意**：不要耸肩；背不要塌。\n    \n\n---\n\n### 2. **引体向上（Pull-Up）**\n\n- **作用**：增强背阔肌、斜方肌，矫正圆肩。\n    \n- **做法**：\n    \n    1. 正握横杠，手略比肩宽。\n        \n    2. 用背部发力拉起，直到下巴越过横杠。\n        \n    3. 缓慢下放身体。\n        \n- **替代动作**：初学者可用拉力带辅助，或做下拉训练。\n    \n- **次数**：力所能及 5~10 次 / 3组。\n    \n- **注意**：收肩胛；勿借力甩起。\n    \n\n---\n\n### 3. **超人式（Superman）**\n\n- **作用**：强化腰背部竖脊肌、臀肌，有助改善脊柱稳定性。\n    \n- **做法**：\n    \n    1. 趴在瑜伽垫上，手臂和腿伸直。\n        \n    2. 同时抬起手臂、上胸、双腿，呈\"飞行状\"。\n        \n    3. 顶点保持1~3秒，慢慢放下。\n        \n- **次数**：10~15次 / 3组。\n    \n- **注意**：避免压脖子，保持颈椎中立。\n    \n\n---\n\n### 4. **哑铃划船（Dumbbell Row）**\n\n- **作用**：针对中上背部，强化菱形肌和斜方肌。\n    \n- **做法**：\n    \n    1. 俯身90度或一侧扶着凳子，另一手握哑铃。\n        \n    2. 将哑铃朝腰部方向拉起，肘部紧贴身体。\n        \n    3. 控制放下。\n        \n- **次数**：10~12次 / 每侧3组。\n    \n- **注意**：背保持挺直；拉的时候肩胛收缩。\n    \n\n---\n\n## ✅ **二、胸肩拉伸（放松“推”的力量，打开胸腔）**\n\n---\n\n### 5. **门框拉伸（Doorway Stretch）**\n\n- **作用**：拉伸胸大肌，改善圆肩。\n    \n- **做法**：\n    \n    1. 面对门框，一只手臂弯曲呈90度贴住门框。\n        \n    2. 脚向前跨一步，胸部轻轻前推。\n        \n    3. 感受到胸前拉伸即可。\n        \n    4. 每侧保持20~30秒。\n        \n- **注意**：不要用力过猛，感觉到胸前轻微拉扯即可。\n    \n\n---\n\n### 6. **肩部绕圈运动（Shoulder Rolls）**\n\n- **作用**：缓解肩膀僵硬、激活肩带肌群。\n    \n- **做法**：\n    \n    1. 坐或站立，放松双肩。\n        \n    2. 慢慢向后转动肩膀10~~15圈，然后向前转10~~15圈。\n        \n- **次数**：2~3组。\n    \n- **注意**：动作不要太快；配合呼吸效果更好。\n    \n\n---\n\n### 7. **猫牛式（Cat-Cow Pose，瑜伽）**\n\n- **作用**：改善脊柱灵活性，减轻背部僵硬。\n    \n- **做法**：\n    \n    1. 四足跪姿，手掌在肩下，膝盖在髋下。\n        \n    2. 吸气时抬头、塌腰、撅臀（牛式）。\n        \n    3. 呼气时收下巴、拱背、收腹（猫式）。\n        \n    4. 来回缓慢切换，配合呼吸。\n        \n- **次数**：每组8~10次，练2组。\n    \n- **注意**：慢慢做，动作尽量流畅。\n    \n\n---\n\n## 🔁 建议安排（每周 3~5 次）\n\n|类别|动作|推荐频率|\n|---|---|---|\n|力量训练|飞鸟、划船、超人、引体|每周3~4次|\n|拉伸放松|门框拉伸、肩部绕圈、猫牛式|每天1~2次，睡前或久坐后|\n\n## 🧠 总体结构（共约15分钟）：\n\n1. **热身激活**（2分钟）\n    \n2. **背部力量训练**（10分钟）\n    \n3. **胸肩拉伸放松**（3分钟）\n    \n\n---\n\n## 🔥 1. 热身激活（2分钟）\n\n- **肩部绕圈**：向后20圈，向前20圈（1分钟）\n    \n- **动态猫牛式**：慢节奏做10次（1分钟）\n    \n\n---\n\n## 💪 2. 背部力量训练（约10分钟）\n\n每个动作做 **2组**，中间休息 **30秒**，整组做完再循环一次（共2轮）。\n\n|动作|说明|次数|\n|---|---|---|\n|🦅 俯身飞鸟|双手持哑铃/水瓶，背打直|12次|\n|🛶 哑铃划船|单侧支撑，双臂轮流做|每侧12次|\n|🦸 超人式|趴着抬起四肢|保持2秒×15次|\n|🔄 引体向上（或拉力带下拉）|可用门上引体向上杆辅助|能做几次做几次|\n\n如没有哑铃，可以用水瓶（装满水的1.5L瓶）代替。\n\n---\n\n## 🧘 3. 胸肩拉伸放松（3分钟）\n\n|动作|做法|时间|\n|---|---|---|\n|🚪 门框拉伸|每侧胸部保持拉伸|每侧30秒|\n|🐄🐈 猫牛式|缓慢配合呼吸|6~8次|\n|💨 深呼吸+肩部绕圈|放松紧张感|1分钟|\n\n---\n\n## ✅ 每周建议频率：\n\n- **每周至少 4 次**完整训练效果明显\n    \n- 坚持 3~4 周后，你会明显感觉背部更挺、肩膀更自然放松。","tags":["锻炼","身体","运动"],"categories":["锻炼"]},{"title":"一些打算","url":"/posts/3748947426.html","content":"\n以下内容为GPT生成，后面再改\n<!-- more -->\n# 如何作为Java实习生不断成长\n\n### 📚 **自我成长的具体方法与途径**\n\n#### **1. 制定学习计划**\n\n学习Java的过程中，设定明确的目标和阶段性任务非常重要。\n\n- **编程基础与算法**\n    \n    - 你需要掌握Java的基本语法、面向对象编程思想（OOP）、异常处理、集合框架等。\n        \n    - **建议书籍**：\n        \n        - 《Java编程思想》：深入讲解Java的面向对象编程、线程与并发、类加载机制等。\n            \n        - 《算法图解》：不局限于Java，学习数据结构和算法的基础知识。\n            \n    - 学习数据结构与算法是提升编程能力的基础，掌握链表、栈、队列、树、图等基本数据结构，以及排序、查找、动态规划等算法。\n        \n- **设计模式与架构**\n    \n    - **学习设计模式**：掌握常见的设计模式，如单例模式、工厂模式、观察者模式等，能帮助你在项目开发中写出更加优雅和可维护的代码。\n        \n    - **书籍推荐**：《Head First 设计模式》：图文并茂，讲解简单易懂，适合初学者。\n        \n    - **架构学习**：掌握一些基础的系统架构设计理念，比如微服务架构、RESTful API设计、数据库设计等。\n        \n- **框架与技术栈**\n    \n    - **Spring**：学习Spring框架是Java开发人员的必备技能。Spring包括Spring Core、Spring Boot、Spring MVC等，帮助你快速构建Web应用、微服务等。\n        \n    - **Hibernate / JPA**：学习ORM框架，简化数据库操作，减少SQL编码的复杂度。\n        \n    - **MyBatis**：另一种流行的数据库访问框架，理解它的工作原理也是很重要的。\n        \n    - **书籍推荐**：《Spring实战》：系统学习Spring的各个组件，帮助你理解企业级开发中的应用。\n        \n- **系统设计与数据库**\n    \n    - 学习如何设计大型系统，了解数据库优化、索引、事务、分布式等知识。\n        \n    - **数据库**：学习关系型数据库（MySQL、PostgreSQL）和非关系型数据库（MongoDB、Redis）等技术。\n        \n    - **设计模式**：掌握面向对象设计原则，如SOLID原则，帮助你写出可维护、可扩展的代码。\n        \n\n#### **2. 通过实践加深理解**\n\n在工作中，你的学习不应该仅仅停留在理论阶段。实践才是提升技能的最佳方式。\n\n- **参与项目开发**\n    \n    - 在实习过程中，尽量参与到更多项目中，尤其是涉及Java核心技术栈的项目，学习如何应用理论知识解决实际问题。\n        \n    - 不仅要关注前端部分，后端的系统设计、数据库设计、API开发、性能优化等都是你需要关注的重点。\n        \n- **开源项目贡献**\n    \n    - 在GitHub上寻找开源项目并做贡献，不仅能提高你的编程技能，还能拓展人脉，提升你的职业形象。\n        \n    - **如何做贡献**：从修复bug、增加文档、优化代码开始，逐步积累经验。\n        \n- **编写博客或技术笔记**\n    \n    - 写博客或技术笔记能够帮助你总结和巩固学习的内容。同时，你的分享也能帮助他人。\n        \n    - **平台推荐**：掘金、知乎、CSDN等。\n        \n    - 你可以将每天的学习笔记、解决的技术难题或者项目经验分享出来，帮助自己梳理思路，也能为未来的职业发展积累影响力。\n        \n\n#### **3. 学习方法**\n\n- **边做边学**\n    \n    - 理论和实践是相辅相成的，通过做项目来加深理解，遇到问题时再去查资料、看书，解决实际问题。\n        \n    - 每完成一个模块，都会学到新的东西，特别是从解决实际问题中，你会获得更深刻的经验。\n        \n- **看书与读文档**\n    \n    - **阅读书籍**：技术书籍通常比网络文章更加系统、深入。可以选择经典书籍逐步精进，推荐《Effective Java》、《Java并发编程实战》。\n        \n    - **查阅官方文档**：大多数开源框架和工具都有官方文档，学习官方文档能让你了解技术的最佳实践，避免误用。\n        \n\n---\n\n### 📝 **定期复盘与自我评估**\n\n#### **1. 定期复盘**\n\n- **每周复盘**\n    \n    - 每周结束时，花20-30分钟回顾一周的学习与工作，看看自己取得了哪些进展，遇到了哪些难题，哪些地方可以改进。\n        \n    - 可以列出一周完成的任务清单和未完成的任务，找出问题并总结经验。\n        \n- **每月复盘**\n    \n    - 每个月初进行一次全面复盘，回顾自己这一月的学习进度，调整自己的目标。\n        \n    - 评估自己在技术深度、项目经验、编程能力等方面的提升，并设定下个月的目标。\n        \n\n#### **2. 定期自我评估**\n\n- **代码质量**\n    \n    - 定期检查自己写的代码，分析其可读性、可维护性、性能等。\n        \n    - 通过重构、单元测试等方法提高代码质量。\n        \n- **技术深度**\n    \n    - 评估自己掌握的技术深度，看看哪些领域还没有深入学习，例如并发编程、分布式系统、云计算等。\n        \n\n---\n\n### 📖 **上班期间如何看书**\n\n#### **1. 利用通勤时间**\n\n如果你每天需要通勤，可以利用这个时间听技术类播客或技术书籍的有声版，帮助你充分利用碎片时间。\n\n#### **2. 在午休时间阅读**\n\n午休时间是一个较为集中的阅读时间，你可以在这段时间里看书或整理学习笔记。\n\n#### **3. 晚上坚持读书**\n\n每天晚上安排30分钟到1小时的阅读时间，专注于深度的技术书籍或者专业文献，积累知识。\n\n#### **4. 阅读技巧**\n\n- **做好笔记**：在读书时，随时做笔记，将重要的概念和技巧记录下来。\n    \n- **思考与实践**：读完书后，尽量将书中的理论与实际工作结合，思考如何在自己的工作中应用。\n    \n\n---\n\n### 💼 **兼职建议来补贴生活费用**\n\n#### **1. 线上编程兼职**\n\n- **平台**：你可以在一些兼职平台上找到编程任务，如Freelancer、Upwork、猪八戒等。\n    \n- **项目类型**：你可以选择一些小型的Java开发项目，如开发API、网站后台、自动化脚本等。\n    \n\n#### **2. 教学或辅导**\n\n- **编程辅导**：如果你擅长Java，可以做线上或线下的编程辅导，帮助他人学习Java。\n    \n- **辅导学生**：许多学生需要学习Java，你可以通过线上平台提供编程辅导服务。\n    \n\n#### **3. 技术博客或写作**\n\n- **写技术博客**：你可以在技术博客平台上发布技术文章，很多平台会根据你的阅读量支付稿费。\n    \n- **编写教程或电子书**：你可以将自己的学习经验或项目经验写成教程，出售或共享给别人。\n    \n\n#### **4. 做小型项目或工具**\n\n- **开发工具**：你可以开发一些简单的Java工具、网站、或者自动化脚本，出售或出租这些工具给需要的用户。\n    \n- **开源项目**：有些开源项目会提供资助，或者你可以在贡献代码的同时获得雇佣机会。\n\n","tags":["Planning","Java"],"categories":["计划"]},{"title":"短期数学总结","url":"/posts/2847308077.html","content":"总结自己短期学习\n\n<!-- more -->\n# 基础系数\n- 基础解系定义\n\t- x=0的解向量（存疑）\n\t- 是线性无关的\n\t- 线性无关的向量个数 = 自由未知量的个数\n- 基础解系中 含有解向量的个数就是自由未知量的个数\n- 秩 应该是能够凑成最大nxn的矩阵，如果只有一行或者一列，那么最多只能凑成1x1 ，即秩为1；\n- 存在基础解系 -> 含有非零解\n- 不存在基础解系 -> 唯一的解（零解） -> 满秩矩阵\n- 进行矩阵行列式运算时，左上角不是 **1**就是 **-1**\n- 注意计算认真，此处特别容易丢三落四\n\n\n","tags":["数学"],"categories":["高数"]},{"title":"想对自己说的话","url":"/posts/2199537027.html","content":"本篇文章是想对现在和将来的自己说一些话，希望能帮助自己走的更远\n\n<!-- more -->\n# 挺一挺就过去了\n---\n![](images/img-20241101140250528.png)\n非常喜欢龙哥的那句话，**挺一挺就过去了**，这才是一个男人应该做的事情，而不是面对事情难受拒绝、发泄情绪，发泄是女生做的事情，作为一个男人是要无论境遇如何都要咬住牙挺住，不能什么鸡毛蒜皮的事情都放在心上。\n\n# 大局为重\n---\n作为男人要以大局为重。放下不值得关注的小事情，做好自己。\n\n# 在自己可见的前途中行走 \n---\n每当我最难受的时候可能还是因为自己没有走在自己给自己规划的路上。自己不想与更好的自己告别，不想和更好的结果无缘。\n但如果自己每向前迈出一步，多坚持一会，自己便会离那个结果更近一些，但是路途总是遥远的，过程总是艰辛的，自己有很多可以放弃的理由，那我们为什么还要经历这么多困苦挫折来到这个学校呢，不就是为了在这个平台寻找那个更好的结果吗。\n现在就站起来继续拼吧，不要再因为其他的理由放弃，走在自己当初希望自己走的路线中，和当初那个雄心满满的我一起走到最后，不让迷茫击倒自己！\n\n# 把情绪放到思考的下层\n---\n自己不能以情绪来作为做事的准则，而是要以理智的思考来处理，通过不断的对选择做计算，去获取那个最佳的选择，不断的计算选择，得出最优解，起码让我最后到明年三月份的时候不要再因为情绪再产生其他的不必的事情。通过计算，使得自己的精力和时间得到充分利用。\n\n# 做好自己\n![](../images/img-20241104122718965.png)\n\n# 对任何事情不要倾入感情\n这句话也许很冷漠，但却是很多时候注入感情之后做事会看重结果，但是事情就是事情，没必要为了一些事情大是大非渲染自己的情绪，核心还是自己，做事的过程可以当作是一种体验。很多事情只要自己明白什么是自己真正想要的，那结果随他去吧，真正让自己进步的不是一个两个结果，而是过程中自己一次又一次认真经历。\n\n# 跟随别人的优秀\n人生时间有限，每个的结局都是相同，都是躺在地里面；过程可以自己来渲染。成长的过程中，每当我见证别人的优秀的时候都想追随别人的优秀，这不可厚非，追随别人的优秀是我向往更好的自己，是我不愿意一直平庸，不愿意一辈子就什么成就也无，这太没意思了，我要是一点挑战也没有的人云亦云的度过下半辈子，这人生也就太没意思了，这不是我想接受的。我离开这个世界之前我一定是有许多的后悔，但是我想让自己的后悔能少一件就少一件。跟随别人的优秀可以让我能够有一个努力的方向，让我可以一直朝着一个方向努力，实现每一个阶段最好的自己。我不必被周遭不良影响消耗自己的时间和精力。我只是珍惜时间去做好自己，不断的追随更好的自己。\n\n# 心境、心静\n可能还是自己接触到的诱惑太多，自己的意志不坚定，目标不够清晰，我主要还是觉得自己不够努力，不够也无所谓，都是过去，只要每一天都记得来时的目的地就行。感觉我这个人做事目标感越来越差了。对了，后面把抖音删了吧，诱惑能控制就控制，不要让自己太分心，坚持不坚持只不过一刹那的想法罢了，只要自己笃定目标，一瞬间所有的多余想法都会灰飞烟灭，所有的选择更加清晰！\n\n# 任务先行\n列任务表还是很重要的，想让每天流程化就得这样做，不列的话容易自己想干嘛就干嘛，很容易就去干其他的事情。\n\n# 愿意改变\n记得以前自己可以长期让自己去向一件改变靠拢，自己这种长期的主观能动性非常强，那就是我，只不过是曾经的事情，但是不代表以前能做现在就做不了。自己要让自己知道，这是机会，珍惜时间，珍惜机会，让自己主宰自己，而不是被懒惰主宰。\n\n# 语速放慢\n自己一直有一个问题，就是语速的问题，当自己语速不能和自己的思考匹配的时候，很容易导致自己病急乱投医，随便说自己想到的一些话。自己今后需要对语速和思考速度方面进行调整，还有就是声音要洪亮清晰。最后总结一下：语速和思考速度匹配；声音洪亮清晰。\n\n# 减少情绪，理智主导生活\n针对自己长期心理的逃避生活主要事件，自己应该意识到这是不好的行为，自己摆烂最后导致的结果会非常的糟糕，尽量让自己越来越少的情绪化，取而代之的应该是更多的理智的思考，情绪是耗尽不完的，如果想通过其他手段消耗掉情绪带来的不利影响，这需要很频繁的去刻意消耗，同时会浪费很多精力和时间。所以，减少情绪化，多一些理智的思考。对生活要毅然决然，不能生活起来拖泥带水的。\n\n# 无论自己做什么事，务必认真\n![](../images/img-20241127230743838.png)\n#  有感而发 2024/11/30\n- 最近总是对未来很是焦虑，首先我想在我未来的态度中不要焦虑；那如何界定焦虑呢，大概就是在大脑中总是不断浮起，但是那一刻无法立刻解决焦虑，反复影响自己心态，且不具有帮助自己生活的作用；\n- 我认为自己的这种焦虑是因为自己还是太浮躁了，我也想在未来自己能够静下来以后需要自己深思熟虑的事情会很多，这一切都需要自己冷静。之前我自己会很顾虑自己的得失，总是患得患失，总是在攀比中让自己产生焦虑，这些事情不仅无意义而且我觉得都是自己浮躁不够冷静的反应，包括自己谈吐也是很浮躁，说的很快且没有思考，希望以后自己能够**深思熟虑**的做事说话；\n- 对于未来的自己，我想让自己能够持续的情绪稳定，内核稳定，不期望达到处事不惊，能平稳的面对生活中的一切事物就OK；\n- 突然想起来自己好像很久没有对自己产生期待过了，会想起自己对自己的期待感，那大概就是青春的感觉吧，是一种奋斗的、充实的、沉稳的、无懈可击的感觉，最令我感动的还是晨露的味道，不知不觉距离2015年都10年了，感慨之余，还是希望自己能够不断的向前看，焦虑也是因为回头了太多次产生许多冗余的想法，不管之前是怎样，都已经翻篇，接下来就是冲向未来，冲向更好的自己。\n- 我认为性格是可以塑造的，就当前来看我挺想刻意为之，培养自己的性格，比如**沉稳、淡定、乐观、果敢、杀伐果断、雷厉风行、积极向上、有野心**，性格不同于人格，我觉得人格更多的是一种品行，更多的涉及到一个人的原则底线，道德素养。性格是培养的苦难，人格除了培养困难之外，坚持也很困难。\n- 对于人格，我想培养自己**守信、有责任感、坚持和努力**。\n- 因为很多事情除了别人教我之外，只能自己刻意培养，自己对自己刻意这没什么问题，也许以后我会觉得这是人生的必需品。人生这短短的几十年，如果什么都要别人来可以告诉自己，那我得等到什么时候，不如自己点醒自己。\n- 我似乎不是太喜欢做一些小事，我觉得从小事做起是一件非常重要，小事不做难以成大事，小事不为，自己也会变得懒惰。\n- 其他就是希望自己能够改善一下自己的生活作息\n\t- 晚上早点睡觉，把事情记下来留到第二天早上做，这样自己的生活状态也会好一点\n\t- 晚上睡觉前不听歌睡觉，安静入睡\n\t- 按时洗漱刷牙，做饭尽量控制半小时内\n\t- 每天制定大概的几条任务，按照任务来生活\n\t- 格式化生活，让自己生活的方方面面的都井井有条些，床、柜子、桌子什么的该收拾收拾一下。\n- 生活中要不断的思考衡量，计算出更优的生活方式，让一切都处于有序的计算之中，让生活有序，人生有序。\n\n# 能用逻辑思考解决的问题就别动手\n- 希望自己能养成思考的习惯，增增加自己的思考敏锐度\n- 此举是为了提高自己的思考力，从而提高思考效率，节省时间，提高生活效率。\n\n# 任务学会并行处理\n- 多任务处理可以并行处理，不一定非要逐个处置\n\n# 最惨痛的一天\n- 今天转本成绩出来了，还是非常难受的，彷佛自己人生的路有一次被堵上了。但是经历过这次我还是想站起来继续生活，继续寻找新的出路。今晚我彷佛已经不会笑了，压抑、落差顷刻间都出现在我的身上和心里，我再也不想跟任何人联系，更不想跟任何人去发泄心中的苦闷，只想偷偷做点什么事情来尝试挽回自己的未来。难受的是自己只有一个人在走，很多事情都是自己在默默坚持着，我挺喜欢和别人分享自己的所谓成功，也经常幻想成功之后对着某某云云自己的成功经历，但是现在我什么都不想分享了，什么都不想说了，只想安安静静的做好自己，只想想顺势而为，顺其自然，不追求什么结果，只是在过程中不断调整自己做好自己。加油啊yething，以后要稳重一点了，生活不要慌慌张张，认真生活。\n\n# 事要悄悄的做，静静的成\n- 失败的太多了，反而更像安安静静的做事，做成了再吱声\n\n# 像下棋一样去走自己的每一步\n- 第一人称视角下自己太喜欢随心所欲了，但是自己如果像下棋一样去看待自己甚至周围的人事物会理智许多。\n\n# 遇事先处理情绪，再解决问题\n\n# 千万不要让自己对工具产生依赖\n- 自己在工作的时候经常依赖AI开发工具，但是自己很多时候是直接交给AI去干，自己不去研究思考，但是工作中总有意外，为了提高容错率所以自己还是加强自身能力，能研究就研究，能总结就总结，能学习就学习，不仅有碗还得会做饭才行。\n\n# 要以事情为主，人是事情的一方面，要以做成事情为重\n- 要围绕事情展开，处理事情为主，每个人只是事情中的角色，要考虑每个人的角色和做事风格以及利益要害去考虑如何推动事情向自己想要的方向发展。最后我想表达的是，不要以为自己和身边人的情绪化浪费了自己宝贵的时间，多把心思放在如何推送事情发展上，就比如自己当前跟老板对自己是否留任这个事情上面。\n- 看见自己的两次办的这个社保卡，真是感慨，自己现在已经长大成现在这个样子了，不想过多的为自己感到惋惜，只是更多的希望对得起自己！\n\n# 无论遇到什么事情都要首先冷静\n- 遇到事情不是先把情绪提到首位，而是冷静下来看看如何破局，对战况的思考极其重要，所以要首先冷静下来先把事情处理好，防止后期出现其他措手不及的事情\n- 遇到问题就去寻找途径解决问题就好了，其他最好不要上来就被情绪拉下水而无法站住脚处理问题，现在才觉得情绪是很弱势的一个东西\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n支付6月工资中除21日请假以外的工资    包括我的加班费 工资表\n你说我是学生才签实训合同，但是我的工作内容和正式员工完全相同，公司是否承认为劳动关系\n那为何对我进行考勤和业绩考核\n我同学的公司都给应届生缴纳社保，我们用实训协议是不是就避开了\n￥￥￥￥￥\n7月15日支付工资返还合同  工资标准\n要求公司监督下删除个人文件，留存沟通证据\n\n\n\n\n合同：\n\t一共两份，第一份是学校给的三方协议（时间是从去年11月份到今年6月份）但是中间今年2月签署离职\n\t\t\t第二份是今年四月底自己跟公司做的“实训合同”签署（时间是四月底到6月30）\n毕业时间：6月30日\n\n工资组成结构![](../images/img-20250704180116480.png)\n**诉求**\n1. 6月工资 公司口头说明是7月15左右发，正常是发4280元，如果我最后被克扣大部分工资后是否可以就不签署劳动合同为由向公司提起仲裁\n2. 公司个人签署知识产权协议，不允许我删除个人电脑信息，是否可以借助法律来删除属于我自己的隐私数据\n3. 因为第二份合同是在毕业之前签订，由工资组成部分是否可以看出是劳动合同然后向税务机关投诉公司避税\n4. 如果后续公司发工资的时候以 我后面这段时间不上班给公司造成损失 为由拒发工资，是否可以仲裁\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n辞退对话  公司拒开离职证明\n证明公司知道我未毕业\n合同找不到，请出具书面说明确认合同遗失，并承诺补签，如果不能提供主张未签劳动合同的双倍工资\n今天内。。。 我已尽到告知义务\n\t本人实训协议是否替代劳动合同\n\t公司未缴纳社保是否因为学生身份\n\t辞退不赔偿是不是因为协议约定\n劳动合同：追讨工资 未签合同双倍工资 \n\n\n","tags":["胡言乱语"],"categories":["随意"]},{"title":"Java大纲","url":"/posts/2302726656.html","content":"**Java存活路线**\n\n<!-- more -->\n# 一阶段：Java 进阶必备技术栈\n## 01 项目性能优化\n- 性能问题分析理论：3S 定理\n\n- 性能指标：RT、TPS、并发数...\n\n- 压测监控平台：Docker、InfluxDB、Grafana、Prometheus 和 node_exporter 环境搭建\n\n- 梯度压测：分析接口性能瓶颈\n\n- 分布式压测：构建百万次请求的压力\n\n- 服务容器优化：Tomcat、I/O 模型、Undertow 调优\n\n- 数据库调优：影响数据库性能因素\n\n- OpenResty 调优\n\n- 多级缓存调优\n\n- JVM 调优\n\n## 02 JVM虚拟机\n- JVM 基本常识与整体架构\n\n- 类加载子系统：加载时机、加载过程\n\n- 类加载器详解\n\n- JVM 加载机制剖析：一个类的一生\n\n- 双亲委派与打破双亲委派\n\n- 自定义类加载器\n\n- JVM 运行时数据区：堆、虚拟机栈、本地方法栈、方法区、字符串常量池、程序计数器\n\n- JVM 内存模型变迁\n\n- 栈帧剖析与栈异常案例\n\n- 字符串常量池如何存储和查找数据\n\n- 方法区存储什么，永久代与元空间是什么关系\n\n- 一个对象的一辈子：对象创建流程与内存分配\n\n- 对象怎样才会进入老年代？内存担保机制\n\n- 解剖对象这只小麻雀：对象内存布局，对象头 Header 的 MarkWord 和 KlassPoint\n\n- 如何定位一个对象\n\n- GC 基本原理：什么是垃圾、如何找到垃圾、如何清除垃圾、用什么清除垃圾\n\n- 垃圾收集器剖析：Parallel、Serial、CMS、G1、ZGC\n\n- Minor GC 、Major GC 和 Full GC\n\n- JVM 核心参数：标准参数、非标准参数、不稳定参数\n\n- JVM 常用指令：jps、jstat、jinfo、jhat、jmap\n\n- JVM 调优工具：VisualVM、GC Easy、PerfMa、MAT\n\n- GC 日志分析\n\n- GC 日志分析工具\n\n- 内存溢出与泄露案例\n\n- 检测死锁案例\n\n- JVM 调优实战案例：\n\n- 堆内存和元空间优化\n\n- 堆栈优化\n\n- 吞吐量优先策略\n\n- 响应时间优先策略\n\n- G1 全功能垃圾收集策略\n- JVM调优实战案例\n\t- - 堆内存和元空间优化\n\t- 堆栈优化\n\t- 吞吐量优先策略\n\t- 响应时间优先策略\n\t- G1 全功能垃圾收集策略\n## 03 多线程与并发编程\n- 线程和进程、并发与并行、上下文切换\n\n- 多线程并发中的线程安全问题\n\n- 多线程并发的三个特性：原子性、可见性、顺序性分析\n\n- 指令重排序、happens-before 规则\n\n- JMM 模型深度剖析：JSR-133: Java Memory Model and Thread Specification\n\n- Synchronized 原理分析\n\n- 锁优化&锁升级\n\n- Volatile 原理与源码分析\n\n- 多线程在 JVM 中的实现原理剖析\n\n- CAS 算法和 ABA 问题\n\n- 显示锁和 AQS 底层原理分析\n\n- AQS 共享锁实现原理\n\n- ReentrantLock 重入锁源码分析\n\n- ReentrantReadWriteLock 读写锁\n\n- 并发容器深度剖析\n\n- CAS 原子操作及相关类\n\t- 基本数据类型：AtomicInteger、AtomicLong、AtomicBoolean\n\n\t- 数组：AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray\n\n\t- 引用类型：AtomicReference\n- 并发编程工具掌握：CountDownLatch、Semaphore、CyclicBarrier\n\n- Future 和 FutureTask\n\n- 线程池工作原理\n\n- ThreadLocal 底层原理\n## 04 网络编程\n- 网络通信协议：TCP/IP 协议集\n\n- TCP/IP 五层模型和 OSI 模型详解\n\n- TCP 三次握手和四次挥手机制\n\n- TCP 与 UDP 协议\n\n- 从输入 URL 地址到显示网页经历了哪些过程\n\n- HTTP/1.0 与 HTTP/1.1 的区别\n\n- URI 与 URL 的区别\n\n- HTTP 与 HTTPS 的区别\n\n- 同步和异步、阻塞和非阻塞\n\n- 五种 I/O 模型：阻塞 I/O 模型、非阻塞 I/O 模型、多路复用 I/O 模型、信号驱动 I/O 模型、异步 I/O 模型\n\n- JAVA 网络编程模型：BIO、NIO、AIO\n\n- NIO 多路复用深入剖析：Selector、Channel 与 SelectionKey\n\n- NIO 案例 01：客户端与服务器之间通信\n\n- NIO 案例 02：网络聊天室 V1.0\n\n- Netty 总体架构设计\n\n- Netty 线程模型：单线程、多线程与 Netty 线程模型\n\n- Netty 核心组件：Bootstrap、EventLoopGroup、Channel 与 ChannelHandlerContext 等\n\n- Netty 案例 03：客户端与服务器之间通信\n\n- Netty 案例 04：网络聊天室 V2.0\n\n- Netty 编解码器\n\n- RPC 通信原理\n\n- RPC 的设计架构与思想\n\n- RPC 架构完整调用流程\n\n- 案例 05：手写一个 RPC 框架 HeroRPC\n\n- 案例 06：手写一个 Tomcat\n\n- 案例 07：600W+ 连接网络应用实战\n# 二阶段：海量数据存储专题\n## 01MySQL进阶\n- MySQL 应用架构：内存结构、磁盘结构\n\n- MySQL 体系架构\n\n- MySQL 运行机制\n\n- 一条 SQL 语句的完整执行流程\n\n- Buffer Pool\n\n- 日志缓冲\n\n- 内存数据落盘\n\n- CheckPoint\n\n- Double Write\n\n- 存储引擎原理：InnoDB、MyISAM\n\n- 索引的数据结构：B+ 树、为什么不用红黑树、二叉树、B 树？\n\n- 索引原理\n\n- 索引分析与优化建议\n\n- 索引下推 ICP\n\n- 聚簇索引，辅助索引\n\n- 查询分析与优化\n\n- 事务 ACID 特性\n\n- 事务控制的演进\n\n- 事务隔离级别\n\n- LBCC 与 MVCC\n\n- ReadView：快照读、当前读\n\n- 版本链\n\n- 日志：Undo log、redo log、binlog\n\n- 锁：全局锁、表锁、行锁【记录锁、间隙锁、临键锁、插入意向锁】、读锁、写锁\n\n- 复杂 SQL 加锁分析\n\n- 死锁原理\n## 02 海量数据存储与优化\n- 数据库压力测试\n\n- 数据库的连接池优化\n\n- SQL 语句优化：执行计划\n\n- 索引优化\n\n- Limit 优化\n\n- 子查询优化\n\n- SQL 语句性能分析\n\n- 慢查询日志\n\n- 线程使用情况分析\n\n- 集群架构设计\n\n- 主从模式高可用\n\n- 双主模式\n\n- 分库分表\n\n- 分库分表实战\n\n- ShardingSphere\n\n- Sharding-JDBC\n\n- 数据分片剖析实战\n\n- 读写分离剖析实战\n\n- 分布式事务剖析实战\n\n- Sharding-Proxy 实战\n\n- Sharding Sphere 源码分析\n\n- MyCat 核心概念\n\n- MyCat 架构剖析\n\n- MyCat 配置详解\n\n- MyCat 管理命令详解\n\n- MyCat 分片规则详解\n\n- MyCat 分库分表\n\n- MyCat 读写分离\n\n- MyCat 强制路由\n\n- MyCat 注解技术\n\n- MyCat 核心技术分析\n\n- MyCat 分布式事务的实现\n\n- MyCat SQL 路由的实现\n\n- MyCat 跨库 JSON 的实现\n\n- MyCat 数据汇聚和排序的实现\n## 03 MongoDB\n- MongoDB 体系结构\n\n- MongoDB 存储原理\n\n- MongoDB 存储引擎\n\n- MongoDB 索引和 explain 分析\n\n- MongoDB 索引底层原理分析\n\n- MongoDB 主备切换\n\n- MongoDB 企业实战\n\n- MongoDB 集群高可用\n\n- 复制集 replica sets\n\n- 分片集群 Shard Cluster\n\n- MongoDB 安全认证\n\n- 监控服务（Mong oOps Manager）\n\n- MongoDB 备份\n## 04 FastDFS\n- 分布式文件系统\n\n- FastDFS 特性\n\n- FastDFS 的构成\n\n- Linux 下 FastDFS 的安装\n\n- Java 访问 FastDFS\n\n- FastDFS 系统架构\n\n- FastDFS 功能原理\n\n- FastDFS 集群和配置优化\n\n- FastDFS 企业实战\n\n- Spring Boot 访问 FastDFS\n# 三阶段：常用开发框架解读专题\n--- \n## 01 **Spring 源码**\n- Spring 源码阅读前沿\n\n- Spring 创建对象代码演变及 IoC 容器初始化\n\n- 手写一个 Spring 框架案例\n\n- Spring 面向对象 OOAD 和七大设计原则\n\n- Spring-IoC 模块的面向对象设计\n\n- Spring 面向对象方式手写 IoC 流程\n\n- Spring-IoC 源码阅读\n\n- Spring-AOP 核心概念以及动态代理原理\n\n- Spring-AOP 三大核心流程图解\n\n- Spring-AOP 源码阅读\n\n- Spring 中的设计模式：责任链模式与反射调用\n## 02 **Spring MVC 源码**\n- 手写一个 Spring MVC Web 应用框架\n\n- Spring MVC 应用框架架构解析\n\n- 手写一个 Spring 框架案例\n\n- 图解 Spring MVC 执行流程\n\n- Spring MVC 源码阅读\n\n- 解析 RequestMappingAdapter 流程\n## 03 **Spring Boot 应用**\n- Spring Boot 与 Spring 的区别与联系\n\n- Spring Boot 启动流程源码解析\n\n- yml 配置文件加载流程解析\n\n- 图解 Spring Boot 自动配置流程\n\n- Spring Boot&Redis&MyBatis 整合源码解析\n\n- 使用自定义 starter 完成案例\n## 04 **MyBatis 源码**\n- 采用面向的对象方式手写一个 MyBatis 框架\n\n- 解析 MyBatis 版本配置文件及对应存储类分析\n\n- MyBatis-SqlSession 执行流程解析\n\n- MyBatis-Mapper 代理底层原理解析\n## 05 **Tomcat 源码**\n- Tomcat 底层原理解析\n\n- 搭建 Tomcat 源码环境\n\n- 手写 Tomcat 源码\n\n- 阅读解析 Tomcat 启动流程\n\n- Tomcat 加载、创建 Servlet 流程源码解读\n\n- 解析 Tomcat 请求处理流程\n## 06 **Nginx 应用**\n- Nginx 使用原理解析\n\n- Web Server 技术选型\n\n- 详解 Nginx 配置文件\n\n- Nginx 请求定位之 server 定位\n\n- Nginx 请求定位之 location 定位\n\n- Nginx 应用之 rewrite 重定向\n\n- Nginx 应用实战之静态资源服务器\n\n- Nginx 应用实战之反向代理应用\n\n- Nginx 应用实战之负载均衡\n\n- Nginx 应用实战之动静分离\n\n- Nginx 应用实战之虚拟主机应用\n\n- Nginx 应用实战之缓存配置\n\n- Nginx 应用实战之日志管理\n# 四阶段：分布式缓存&搜索专题\n## 01 Redis\n- Redis 底层数据结构的空间使用情况、时间复杂度\n\n- 数据结构原理与场景实战\n\n- Redis 网络模型：阻塞&非阻塞\n\n- 用户态&内核态\n\n- I/O 多路复用\n\n- Redis 单线程\n\n- Redis RESP 通信协议\n\n- Redis 的内存淘汰、内存布局、key 过期机制\n\n- Redis 最佳实践：key 设计原则，bigkey、hotkey 的发现方式和避免手段\n\n- Redis 批处理的场景和不足，分析 Redis 数据安全问题。\n\n- Redis 服务端优化之持久化原理和常见配置\n\n- Redis 服务端优化之命令安全、内存安全配置\n\n- Redis 运维之主从同步、哨兵、集群分片实现原理\n\n- Redis 场景实战\n## 02 Elasticsearch\n- Elasticsearch 倒排索引\n\n- FOR 算法、RoaringBitMap 算法原理\n\n- 前缀树、FST 原理解析\n\n- Elasticsearch 之集群分片\n\n- Elasticsearch 全文搜索 match、精准查询 term\n\n- Elasticsearch 过滤器\n\n- Elasticsearch 组合查询、模糊查询\n\n- scriptings 脚本\n\n- Elasticsearch 分词过滤\n\n- Elasticsearch 文档\n\n- 外部词库更新\n\n- 分词器 tokenizer\n\n- Elasticsearch 聚合查询\n\n- Elasticsearch 场景实战\n# 五阶段：消息队列专题\n## 01 消息中间件介绍\n- 消息中间件使用场景\n\n- 消息中间件需要解决的问题\n\n- 消息中间件选型\n\n- 领域模型介绍\n\n- RocketMQ 环境搭建、Debug 调试\n## 02 RocketMQ 实战\n- 消息发送 API 详解与版本变迁说明\n\n- 消息发送核心参数与工作原理\n\n- 消息发送常见错误与解决方案\n\n- 事务消息以及定时消息发送实战\n\n- 消息消费 API 详解与版本变迁说明\n\n- DefaultMQPushConsumer 核心参数与工作原理\n\n- DefaultMQPushConsumer 使用示例与注意事项\n\n- 结合应用场景学习 DefaultMQPushConsumer\n\n- 消息过滤实战\n\n- 消息消费积压问题排查实战\n\n- 订阅关系不一致实战\n\n- 批量消费实战\n## 03 RocketMQ 原理应用\n- Broker 启动流程分析\n\n- NameServer 路由注册机制\n\n- 生产者的发送消息流程\n\n- 消费者的接收消息流程\n\n- 消息的可靠性应该如何保证\n\n- 不同消息的有序性如何解决\n\n- Broker 接收消息的处理流程\n## 04 RocketMQ 高级特性\n- 消息在 Broker 端的文件布局\n\n- 消息存储的高效与刷盘策略\n\n- Broker 快速读取消息机制\n\n- 文件恢复与 CheckPoint 机制\n\n- 消息大量堆积了该怎么办\n\n- 部署架构与高可用机制\n\n- NameServer 的设计理念\n## 05 Kafka 实战\n- Kafka 基础架构运行流程\n\n- 生产者选择分区发送数据流程\n\n- 生产者发送数据的可靠性保证\n\n- 服务端的消息处理架构模型\n\n- 服务端消息存储的文件布局\n\n- 如何保证服务端数据的一致性\n\n- 消费方如何消费数据/消费分区\n\n- Kafka 该如何实现顺序消费\n\n- 消费者组重平衡流程解析\n\n- Kafka 有哪些高性能的设计\n\n- Kafka 与 RocketMQ 的主流功能对比\n# 六阶段：微服务前沿技术栈专题\n## 01 体系介绍\n- Nacos Registry\n- Nacos Config\n- OpenFeign\n- Gateway \n- Dubbo\n- Sentinel\n- Seata\n## 02 Spring Cloud 最佳实践\n\n- Provider + Consumer + Eureka 服务搭建\n    \n- Provider + Consumer + Nacos 服务搭建\n    \n- Consumer + Provider + Nginx 集群搭建\n## 03 Nacos 注册与发现\n\n- Nacos 服务注册案例搭建\n    \n- Nacos 服务订阅案例搭建\n    \n- Nacos Client 发起注册流程\n    \n- Nacos Server 处理注册流程\n    \n- Nacos Client 发起订阅流程\n    \n- Nacos 心跳与剔除机制\n## 04 Nacos 配置中心\n\n- Nacos Config 动态更新端口案例搭建\n    \n- Nacos Config 动态更新配置案例搭建\n    \n- Nacos 配置中心源码分析\n    \n- Nacos 动态更新机制\n    \n- Nacos UDP 通知更新机制\n    \n- Nacos 集群同步源码分析之 CP + AP 模式\n    \n- Nacos 集群同步 Distro 一致性协议\n    \n- Nacos 集群同步 Raft 一致性协议\n## 05 OpenFeign 负载均衡\n\n- Ribbon 工程案例搭建\n    \n- OpenFeign 负载均衡与降级案例搭建\n    \n- OpenFeign 源码分析之 @FeignClient 注解扫描机制\n    \n- OpenFeign 源码分析之 Feign 的上下文隔离机制\n## 06 Gateway 网关路由\n\n- Gateway 路由案例搭建\n    \n- 自定义拦截过滤\n    \n- 转发重定向机制\n## 07 Sentinel 限流降级\n\n- Sentinel 手动设置限流/降级案例搭建\n    \n- Sentinel 接入 Nacos 案例搭建\n    \n- 探索 Sentinel 规则持久化机制\n    \n- 联动 Sentinel 与 Nacos 的持久化实现\n    \n- 核心 SphU.entry 源码分析\n    \n- ProcessorSlotChain 过滤器链流程\n    \n- StatisticSlot 核心处理逻辑分水岭\n## 08 Dubbo 服务调用框架\n\n- Dubbo 工程案例环境搭建\n    \n- Provider & Consumer 案例搭建\n    \n- 依赖检查 & 负载均衡案例搭建\n    \n- 广播调用 & 缓存操作案例搭建\n    \n- 点对点调用案例搭建\n    \n- 泛化调用案例搭建\n    \n- Dubbo 源码分析\n    \n- JDK SPI 与 Dubbo SPI 机制\n    \n- Dubbo 服务发布流程\n    \n- Dubbo 服务订阅流程\n    \n- Dubbo Wrapper 机制\n    \n- Dubbo 协议编解码\n# 七阶段：持续集成与容器化专题\n## 01 CI/CD、DevOps\n\n- 软件生命周期概念\n    \n- CI/CD 概念\n    \n- DevOps 概念\n    \n- 搭建实验环境\n    \n- 初识 Jenkins\n    \n- Jekins 集成 Maven 构建 Java 应用程序\n    \n- Jekins 集成 Git 搭建 GitLab 服务器\n    \n- Jenkins 集成 GitLab 管理 Java 应用程序\n    \n- Jenkins Security 用户角色管理\n    \n- Jenkins 自动化任务\n    \n- Jenkins 流水线 Pipeline\n    \n- Jenkins 实战之集成 Ansible\n    \n- Jenkins 实战之搭建 CI/CD 流水线\n## 02 Docker\n\n- Jenkins 基础&安装流程\n    \n- 虚拟化技术 vs 容器化原理\n    \n- Docker client 命令详解\n    \n- Docker 交互指令\n    \n- Docker 镜像概念\n    \n- Docker 实战部署 Web 服务\n    \n- Docker-compose 部署多容器应用\n    \n- Docker 进阶：container 概念详解\n    \n- Docker 进阶：network 概念详解\n    \n- Docker 进阶：image 概念详解\n    \n- Docker 进阶：volume 概念详解\n    \n- Docker Swarm：微服务项目容器化部署\n    \n- Docker compose vs Docker Swarm\n    \n- Docker 私服搭建\n\n## 03 Kubernetes\n\n- K8s 集群搭建\n    \n- Harbor 仓库搭建\n    \n- K8s 基本指令入门\n    \n- K8s 核心组件原理\n    \n- K8s 网络原理\n    \n- K8s 负载均衡\n    \n- POD 调度详解、重启策略\n    \n- 容器探针\n    \n- POD 核心原理剖析\n    \n- Ingress 七层负载君合实战方案\n    \n- ReplicaSet 剖析\n    \n- configmap 资源对象剖析\n    \n- K8s 存储解析\n    \n- PVC 和 PV 深度剖析\n    \n- headless Service 原理解析\n    \n- statefulSet 原理解析\n    \n- 有状态服务部署","tags":["Java","技术路线"],"categories":["Java","学习路线"]},{"title":"10月 - 每日反省","url":"/posts/2662318435.html","content":"- 记录10月每日收获\n\n<!-- more -->\n# 26日\n---\n学习了行列式的性质，五个字**转换加乘拆**，即转置、变换、倍加、数乘和拆分\n- 转置：行变成列，①行变成①列，n行变成n列...；并且转置之后等于原行列式\n- 变换：行列式的两行或者两列相互交换位置，整个行列式要变号；变换一次要变一次号\n- 倍加：某一行（列）的k倍之后加到另外一行（列）上，行列式值不变\n- 数乘：某一行或者某一列乘以一个数字相当于**整个行列式**乘以这个数\n- 拆分：针对行列式中加减的情况，一行（列）进行拆分，但是其余行（列）不变；**一行（列）拆开，其余行（列）不变**\n>其中：\n>1：如果两行或者两列相同，则行列式值为0\n>2：数乘可以用来提炼某一行（列）的公因子实现化简行列式\n>3：一行（列）对应位置元素是另外一行（列）的倍数，则行列式值=0\n>4：倍加用来**造0**化简\n\n# 27日\n---\n  今天学习了行列式的按行展开和按列展开、余子式和代数余子式。主要利用一行或者一列中含0量高的那行（列），无论是二阶还是三阶都可以用行列式的展开来快速求解，相比于之前的使用行列式的性质（转换加倍分）来的快，但是这一块因为老师上课不好演示，学起来比较困难。\n\n  上午做行列式性质的时候，遇到一种有特点的题，就是无论哪一行，那一行所有元素加起来的和都是相同的，此题型的解题方法为：将第一列后面的几列全部加到第一列，然后第一列所有的元素都是相同的和，然后将这个和提到行列式的外面，然后第一列全都是1，此时再用行列式性质进行**造0**求解。\n\n\n# 28日\n---\n  上午开论文会，下午写论文写到回宿舍，回宿舍之后又帮其他宿舍的两个同学的代码搞了一下，搞到凌晨才回去。所以，收获几乎为0。\n\n# 29日\n---\n  今天白天一直都在做数学，晚上来把论文赶出来。\n  数学学了行列式的按行展开按列展开的逆用，自己补充了异乘变零定理：一行（列）和另一行（列）的代数余子式相乘的和为0。此外还学了矩阵：概念，加减乘，一些特殊矩阵（单位矩阵、上三角矩阵、下三角...);\n  计算四阶行列式步骤多，而且对不同的行或列进行造0很容易导致结果不同，这个地方需要自己大量练习计算。\n  还有两天，数学继续干。\n\n# 30日 \n---\n  今天上午在完善论文，一直在画E-R图，下午写论文，晚上改论文，单词背了四五百，其他无。属于是白忙活的一天。\n\n  \n","tags":["标签"],"categories":["反省","10月"]},{"title":"Plans for 2024","url":"/posts/2479467106.html","content":"2024年升级清单\n\n<!-- more -->\n\n**10月**\n\n1. 数学基础班学完\n2. 英语单词6000词重新过2轮\n\n---\n\n**11月**\n\n1. 数学所有课程做一遍\n2. 英语套卷做30套，作文每种模板背十篇，听力把全国所有的听力过一轮\n3. 专业课的PDF全部看完并熟知，时间充裕就做文字输出\n4. 月末总结出自身的学习体系（流程 + 方法 + 细节）\n\n---\n\n**12月**\n\n- 待定\n","tags":["年度期待","Planning"],"categories":["年度"]},{"title":"排版工具 - Typst","url":"/posts/3498028646.html","content":"\n**放置一些我个人喜欢用的一些工具**\n\n<!-- more -->\n# Typst 平替Latex的新一代工具\n---\n- [中文社区导航](https://typst-doc-cn.github.io/guide/quick-start.html)\n- [官网使用Typst](https://typst.app/)\n- [中文教程](https://typst-doc-cn.github.io/docs/tutorial/writing-in-typst/)\n- [官网教程-英文](https://typst.app/docs/)\n- [https://typst.app/universe/](https://typst.app/universe/)\n\n>使用方式除了官网编辑器之外，还可以用Vscode安装插件**Tinymistt Typst**进行写作\n>此外Chrome浏览器在浏览Typst官网的时候在地址栏提供下载，可以安装到本地使用。\n>Typst听说是两个德国人被Latex折磨的不行之后自己发明出来的，是优秀的排版工具\n>我是为了写简历才学习使用的，此外还可以用来写论文一类的规范文件。","tags":["tools"],"categories":["工具"]},{"title":"MySQL","url":"/posts/3259397556.html","content":"![](images/file-20241023133230490.png)\n\n**MySQL相关知识总结**\n\n<!-- more -->\n# 如何处理 mysql 的死锁问题\n[# 如何处理 mysql 的死锁问题](https://xie.infoq.cn/article/71b956f9467eddb8c352bada1)\n","tags":["MySQL","数据库"],"categories":["数据库","MySQL"]},{"title":"基础理论知识补充","url":"/posts/2782156371.html","content":"![](images/file-20241023081927058.png)\n\n**补充在计算机基础学习过程中遇到的疑惑点**\n\n<!-- more -->\n# 数据总线双向三态\n**数据总线双向三态是一种在计算机硬件中用于数据传输的机制，它允许数据在总线上进行双向传输，并且可以处于高阻态**。以下是对数据总线双向三态的具体说明：\n\n1. **双向性**：数据总线的双向性意味着它可以支持数据的双向流动。具体来说，数据既可以通过总线从CPU传送到其他设备（如存储器或I/O接口），也可以从这些设备传送回CPU。这种双向性使得数据总线非常灵活，能够适应多种不同的数据传输需求[^1^]。\n\n2. **三态特性**：三态是指总线可以处于三种不同的状态：高电平（逻辑“1”）、低电平（逻辑“0”）和高阻态（通常用符号Z表示）。高阻态是一种特殊状态，在这种状态下，总线既不输出高电平也不输出低电平，相当于与外部电路断开，不会影响到其他设备的正常工作[^3^][^4^]。\n\n3. **使能控制**：三态门通过一个使能信号（EN）来控制其输出状态。当使能信号为高电平时，三态门正常工作，输出高电平或低电平；当使能信号为低电平时，三态门输出高阻态。这种设计使得多个设备可以共享同一条总线而不会发生冲突[^4^]。\n\n4. **应用场景**：数据总线双向三态广泛应用于各种计算机系统中，特别是在需要频繁进行数据交换的场景中，如内存访问、I/O操作等。此外，在FPGA（现场可编程门阵列）设计中，双向IO口也常使用三态门来实现数据的双向传输[^2^][^5^]。\n\n综上所述，数据总线双向三态是一种高效且灵活的数据传输机制，通过使能信号的控制，实现了数据的双向流动和高阻态输出，从而满足了复杂系统对数据传输的需求。\n\n---\n\n# 通用寄存器\n通用寄存器是**处理器中用于存储数据和参与算术逻辑运算的重要组件**。以下是对通用寄存器的详细介绍：\n\n1. **基本概念**：通用寄存器是CPU内部用于暂时存放数据、指令和地址的存储单元。它们的主要功能包括存储临时数据、计算过程中的中间结果，以及作为指针来访问内存地址[^1^]。\n\n2. **主要作用**：通用寄存器在计算机系统中扮演着核心角色。它们不仅用于存储数据和指令，还参与到几乎所有的算术和逻辑运算中。例如，加法、减法、乘法和除法等操作都可能需要通用寄存器的参与[^2^]。\n\n3. **特殊功能**：除了基本的存储和运算功能外，某些通用寄存器还具有特殊的用途。例如，在8086处理器中，AX寄存器通常被用作累加器，用于执行乘法和除法运算；BX寄存器则常被用作基址寄存器，用于存储内存地址；CX寄存器作为计数器，用于循环和位移操作；DX寄存器则用于I/O操作和乘除运算中的数据暂存[^4^]。\n\n4. **分类**：根据不同的处理器架构和设计，通用寄存器可以分为整数寄存器和浮点寄存器两大类。整数寄存器主要用于存储整数数据，而浮点寄存器则用于存储浮点数数据。此外，一些处理器还将通用寄存器设计为具有多个子寄存器或寄存器组的形式，以便更好地支持不同的数据类型和操作[^2^]。\n\n5. **应用**：在程序设计中，特别是汇编语言编程中，程序员需要熟悉每个通用寄存器的一般用途和特殊用途，以便在程序中做到正确、合理地使用它们。通过合理利用通用寄存器，可以提高程序的执行效率和性能[^1^][^2^]。\n\n综上所述，通用寄存器在计算机系统中具有举足轻重的地位。它们不仅是数据存储和传输的关键工具，还是算术逻辑运算的核心参与者。\n\n---\n# 定点运算器\n**定点运算器是一种专门用于执行定点数运算的硬件设备，广泛应用于计算机系统中进行数值计算和数据处理**。以下是对定点运算器的详细介绍：\n\n1. **概念与应用**\n   - **概念定义**：定点运算器是计算机中的一种重要组成部分，主要用于处理定点数运算。它通过固定小数点位置的方式，对整数和小数部分进行处理[^1^]。\n   - **应用领域**：定点运算器广泛应用于图像处理、音频处理、信号处理、通信系统以及嵌入式系统等领域。随着人工智能和深度学习技术的发展，定点运算器在神经网络模型的部署和推理过程中也发挥着重要作用[^1^]。\n2. **基本组成**\n   - **寄存器**：寄存器用于存储操作数和运算结果，包括累加器和数据寄存器等[^1^][^5^]。\n   - **运算单元**：运算单元负责执行各种算术运算，如加法、减法、乘法和除法等[^1^][^3^]。\n   - **控制逻辑**：控制逻辑协调整个运算器的工作流程，控制操作数的输入输出和运算步骤的调度[^1^]。\n3. **工作原理**\n   - **操作数输入**：将需要进行运算的定点数从外部输入到定点运算器的寄存器中[^1^]。\n   - **运算操作**：根据指定的运算类型，通过运算单元计算出结果[^1^]。\n   - **结果输出**：将运算得到的结果输出到指定的寄存器中，供后续的运算或输出到外部使用[^1^]。\n4. **关键技术**\n   - **乘法运算**：定点运算器中的乘法运算需要考虑定点数的小数位取舍、溢出判断和乘法结果的精度保持等问题[^1^]。\n   - **加减运算**：定点数的加减运算需要考虑进位和溢出的处理，以及结果的精度保持[^1^]。\n5. **总线结构**\n   - **单总线结构**：所有部件都接到同一总线上，同一时间内只能有一个操作数放在单总线上[^3^][^5^]。\n   - **双总线结构**：两条总线各自把数据送至ALU的输入端，两个操作数同时加到ALU进行计算[^3^][^5^]。\n   - **三总线结构**：旁路器的作用是不通过ALU实现通用寄存器内的数据传输，速度最快[^3^][^5^]。\n6. **性能优化**\n   - **流水线技术**：采用流水线技术可以提高定点运算器的处理速度和效率[^4^]。\n   - **位移技术**：利用位移操作可以简化乘除法运算，提高运算速度[^4^]。\n   - **预测技术**：通过预测技术可以减少运算延迟，提高定点运算器的性能[^4^]。\n7. **设计原则**\n   - **指令系统兼容性**：定点运算器的设计需要与指令系统兼容，确保能够正确执行各种指令[^5^]。\n   - **机器字长考虑**：机器字长决定了一次运算的位数和存储器的位数，影响定点运算器的设计[^5^]。\n   - **体系结构适应性**：定点运算器的设计需要考虑整个计算机系统的体系结构，确保其与其他部件的协同工作[^5^]。\n\n综上所述，定点运算器是计算机中不可或缺的组成部分，它在数值计算和数据处理方面发挥着重要作用。了解定点运算器的基本概念、组成、工作原理和技术特点，有助于更好地理解和应用这一重要的计算机组件。\n\n---\n# CPU内部的时钟频率\n在计算机领域，CPU的时钟频率是衡量其处理速度的一个重要指标。它代表了CPU每秒钟能够执行的周期数，这个数字越高，通常意味着CPU的运算能力越强。\n\n### 一、定义\n\n- **基本概念**：时钟频率是指振荡器产生的输入脉冲信号的频率，这个频率是同步电路工作的基准[^1^]。\n\n- **单位**：时钟频率的单位是赫兹（Hz），表示每秒周期性变化的次数[^2^]。\n\n- **重要性**：它是评定CPU性能的重要指标之一，因为时钟频率直接影响着CPU每秒可以执行的指令数[^3^]。\n\n### 二、原因\n\n- **命名由来**：时钟频率之所以被称为“时钟”，是因为它就像时钟一样规律地摆动，为CPU提供稳定的工作节奏。CPU的所有操作都按照这个节奏进行，确保了指令的有序执行[^6^]。\n\n- **与时间的关系**：时钟频率与时间紧密相关，它决定了CPU完成任务的速度。高频率意味着CPU可以在更短的时间内完成更多的工作[^7^]。\n\n- **技术实现**：在技术上，CPU通过内部的时钟电路来产生和控制时钟频率。这个频率是通过晶体振荡器产生的，晶体振荡器根据其物理特性在特定条件下以固定频率振动，从而提供稳定的时钟信号[^9^]。\n\n- **发展历史**：从早期的机械齿轮时钟到现代的电子振荡器，时钟技术的发展促进了现代计算机中时钟频率的应用。随着技术的进步，CPU的时钟频率也在不断提高，推动了计算机性能的提升[^10^]。\n\n- **与其他组件的关系**：CPU的时钟频率不仅影响自身的运行速度，还影响与其他硬件组件的数据交换速率。例如，内存和外设也需要与CPU的时钟频率同步，以确保数据的正确传输[^11^]。\n\n- **性能限制因素**：尽管时钟频率对CPU性能至关重要，但它并不是唯一的决定因素。CPU的架构、缓存大小、指令集等也会影响其最终性能[^3^]。\n\n- **能效考量**：随着能源成本的上升和环境保护意识的增强，高时钟频率带来的高能耗问题不容忽视。因此，现代CPU设计中越来越注重能效比，即在提供高性能的同时降低能耗[^7^]。\n\n综上所述，CPU的时钟频率不仅是衡量其性能的关键指标，也是整个计算机系统设计和优化的核心要素。了解时钟频率的定义和它为何被称为“时钟”，有助于深入理解现代计算机的工作原理和性能提升的途径。\n\n---\n# 为什么Cache 不能由程序或者程序员访问是高速缓存的透明性\n好的，关于Cache（高速缓存）的透明性，以下是一些解释：\n1. **定义与概念**：Cache的透明性指的是在计算机系统中，Cache的存在和操作对程序员来说是不可见的。这意味着程序员不需要直接管理或控制Cache，也不需要为了适应Cache的特性而修改程序代码。\n\n2. **透明性的体现**：Cache的管理完全由硬件自动完成，包括数据的读取、写入、替换等操作。这些操作对程序员是透明的，即程序员无法直接感知到这些操作的发生。由于Cache的存在，程序的执行速度得到了提升，但这种提升对程序员来说是“透明”的，即他们不需要为此付出额外的努力或编写额外的代码。\n\n3. **透明性的意义**：Cache的透明性简化了程序员的工作，使他们可以专注于编写程序逻辑，而无需关注底层的存储细节。同时，它也使得计算机系统能够更高效地利用资源，提高整体性能。\n\n4. **与非透明Cache的区别**：非透明Cache需要程序员显式地控制和管理Cache，这增加了编程的复杂性和难度。而透明Cache则通过硬件自动管理，减轻了程序员的负担。\n\n5. **实现方式**：Cache的透明性是通过硬件和操作系统的设计和优化来实现的。例如，现代CPU通常采用多级Cache结构，并通过复杂的替换策略和写回策略来优化Cache的性能。同时，操作系统也会提供相应的支持，以确保Cache的正确性和一致性。\n\n6. **对程序员的影响**：虽然Cache对程序员来说是透明的，但这并不意味着程序员可以完全忽略Cache的存在。了解Cache的工作原理和特性对于优化程序性能仍然是非常重要的。然而，在实际编程中，程序员通常不需要直接操作Cache，而是通过编写高效的代码来充分利用Cache的优势。\n\n7. **发展趋势**：随着计算机技术的不断发展，Cache的容量和速度都在不断提升，其透明性也在进一步增强。未来的计算机系统可能会采用更先进的Cache技术和算法，以进一步简化程序员的工作并提高系统性能。\n\n综上所述，Cache的透明性是指其在计算机系统中的存在和操作对程序员来说是不可见的。这种透明性简化了程序员的工作，提高了系统性能，并推动了计算机技术的进步和发展。\n\n---\n# 集成电路\n**集成电路的全称是Integrated Circuit，简称IC**。\n\n## 电源管理、时钟生成\n**电源管理（Power Management）是指系统在运行过程中对电源的有效控制，以优化功耗和性能；时钟生成（Clock Generation）则涉及为系统各部分提供同步信号，确保它们按照正确的时序工作**。以下是这两个概念的具体介绍：\n\n1. **电源管理**\n   - **定义与目的**：电源管理是指通过一系列技术和策略，有效控制和管理设备的电源消耗，以延长电池寿命、提高能效并降低运营成本。它涵盖了从硬件设计到软件实现的各个方面[^1^]。\n   - **主要技术**：动态电压频率调节（DVFS）、自适应电压调整（AVS）、电源模式转换（如休眠模式、待机模式）等是现代电源管理中的常用技术。这些技术可以根据系统负载动态调整电源供应，减少不必要的能源浪费[^1^]。\n   - **应用场景**：从个人电子设备（如智能手机、笔记本电脑）到数据中心的大型服务器系统，再到工业自动化和物联网设备，电源管理无处不在，对于提升设备续航能力、降低能耗具有重要意义[^1^]。\n2. **时钟生成**\n   - **定义与作用**：时钟生成是指在数字系统中产生稳定、准确的时钟信号的过程。这些信号用于同步系统内各个组件的操作，确保数据处理和传输的准确性和一致性[^2^]。\n   - **关键技术**：锁相环（PLL）、晶体振荡器（Crystal Oscillators）和时钟分配网络（Clock Distribution Networks, CDN）是实现高质量时钟信号的关键组件。PLL可以增加时钟频率的稳定性，而CDN负责将时钟信号分配给系统的各个部分[^2^]。\n   - **应用领域**：从微处理器到FPGA，再到通信设备，时钟生成对于任何需要精确时间控制的数字系统都是必不可少的。特别是在高速数据传输和处理领域，高质量的时钟信号对于保证系统性能至关重要[^2^]。\n\n综上所述，电源管理和时钟生成是现代电子系统中不可或缺的两大核心技术。它们分别从能源效率和时间准确性两个方面，共同支撑着系统的高效、稳定运行。\n","tags":["计算机基础","理论知识"],"categories":["专业课"]},{"title":"高等学习笔记","url":"/posts/2782156371.html","content":"![](images/file-20241023100726806.png)\n**记录高等数学学习过程中的疑惑点**\n\n<!-- more -->\n\n# 二阶线性微分方程\n\n二阶线性微分方程是**一类特殊的微分方程，其未知函数及其一阶、二阶导数都是一次方的**。这类方程在数学和物理学中有广泛的应用。以下是对二阶线性微分方程的详细解析：\n\n1. **基本形式**：二阶线性微分方程的标准形式为y''+p(x)y'+q(x)y=f(x)，其中p(x), q(x), f(x)在某区间上连续[^1^]。当f(x)=0时，该方程称为齐次方程；当f(x)≠0时，称为非齐次方程[^2^]。\n2. **解的结构**：对于二阶线性微分方程，其解通常包含两个独立的任意常数，这意味着解不是唯一的[^1^]。对于初值问题，如给定初始条件y(x_0)=y_0, y'(x_0)=y_1，则在x_0的邻域内存在唯一的解[^1^]。\n3. **求解方法**：二阶线性微分方程的求解方式分为两类：一是二阶线性齐次微分方程，二是线性非齐次微分方程。齐次方程主要采用特征方程求解，而非齐次方程则在对应的齐次方程的通解上加上特解即为非齐次方程的通解[^2^]。\n4. **特殊类型**：二阶常系数线性微分方程是二阶线性微分方程的一种特殊形式，其中p和q为常数。这种类型的方程在工程技术及力学和物理学中有广泛的应用[^3^]。其求解方法包括待定系数法、多项式法、常数变易法和微分算子法等[^3^]。\n5. **应用实例**：二阶线性微分方程在许多实际问题中都有应用，如振动问题、热传导问题等。例如，简谐振子的位移随时间的变化可以用二阶线性微分方程来描述[^3^]。\n\n综上所述，二阶线性微分方程不仅是数学理论的重要组成部分，也是解决实际问题的强大工具。通过掌握其基本形式、解的结构、求解方法以及特殊类型，可以更好地理解和应用这一重要的数学概念。\n\n---\n\n**二阶线性微分方程中的“二阶”指的是微分方程中未知函数的最高导数是二阶导数**。\n\n二阶导数在数学分析中表示函数变化的加速度，即速度的变化率。在物理问题中，这通常与物体的加速度相关联。例如，在简谐振子模型中，位移随时间的变化可以通过二阶导数来描述，反映了物体受力与其加速度之间的关系[^3^]。\n\n二阶线性微分方程的标准形式为y''+p(x)y'+q(x)y=f(x)，其中y''代表未知函数y关于变量x的二阶导数。这种形式的方程在物理学和工程学中有广泛的应用，如在振动分析、电路理论等领域[^1^][^2^]。\n\n---\n\n**二阶线性微分方程中的“线性”意味着微分方程中未知函数及其导数都是一次方的**。\n\n具体来说，这意味着在方程中，未知函数（通常表示为y）和其一阶导数（y'）、二阶导数（y''）都以一次幂的形式出现。这种形式的方程称为线性微分方程[^1^][^2^]。\n\n在线性微分方程中，未知函数及其各阶导数作为整体的一次幂，不包含这些变量的高次幂或它们之间的乘积[^2^]。例如，方程y''+p(x)y'+q(x)y=f(x)中，y、y'和y''都是一次方的，符合线性的定义[^1^]。\n\n总的来说，线性特性使得这类微分方程的求解过程具有特定的规律性和简便性，是数学和物理问题中常见的一种形式。\n\n# 虚数单位 i 的运算公式\n\n---\n\n在数学中，关于虚数单位 \\( i \\) 的运算公式主要涉及四则运算、幂运算和三角函数等。以下是一些常见的公式：\n\n1. **加法**\n\n   - **公式**：\\((a + bi) + (c + di) = (a + c) + (b + d)i\\)\n   - **解释**：虚数相加时，分别将它们的实部和虚部相加[^1^][^2^]。\n2. **减法**\n\n   - **公式**：\\((a + bi) - (c + di) = (a - c) + (b - d)i\\)\n   - **解释**：虚数相减时，分别将它们的实部和虚部相减[^1^][^2^]。\n3. **乘法**\n\n   - **公式**：\\((a + bi)(c + di) = ac + (ad + bc)i - bd\\)\n   - **解释**：利用分配律展开后，再结合 \\(i^2 = -1\\) 进行化简[^1^][^2^][^3^]。\n4. **除法**\n\n   - **公式**：\\(\\frac{a + bi}{c + di} = \\frac{ac + bd}{c^2 + d^2} + \\frac{bc - ad}{c^2 + d^2}i\\)\n   - **解释**：首先将分子分母同时乘以分母的共轭复数，使分母变为实数，然后进行除法运算并化简[^1^][^2^][^3^]。\n5. **幂运算**\n\n   - **公式**：\\(i^2 = -1\\)，\\(i^3 = -i\\)，\\(i^4 = 1\\)，以此类推，形成一个周期为4的循环[^3^][^4^]。\n   - **解释**：虚数单位 \\(i\\) 的幂运算具有周期性，每4次幂运算后回到原点。\n6. **三角函数**\n\n   - **正弦函数**：\\(\\sin(a + bi) = \\sin(a)\\cos(bi) + \\cos(a)\\sin(bi) = \\sin(a)\\cosh(b) + i\\sinh(b)\\cos(a)\\)\n   - **余弦函数**：\\(\\cos(a - bi) = \\cos(a)\\cos(bi) + \\sin(a)\\sin(bi) = \\cos(a)\\cosh(b) + i\\sinh(b)\\sin(a)\\)\n   - **正切函数**：\\(\\tan(a + bi) = \\frac{\\sin(a + bi)}{\\cos(a + bi)}\\)\n   - **余切函数**：\\(\\cot(a + bi) = \\frac{\\cos(a + bi)}{\\sin(a + bi)}\\)\n   - **正割函数**：\\(\\sec(a + bi) = \\frac{1}{\\cos(a + bi)}\\)\n   - **余割函数**：\\(\\csc(a + bi) = \\frac{1}{\\sin(a + bi)}\\)\n   - **解释**：这些三角函数公式将实数域的三角函数扩展到复数域，通过引入双曲函数来处理虚部[^2^][^4^]。\n7. **复数模和共轭**\n\n   - **模**：对于复数 \\(a + bi\\)，其模为 \\(\\sqrt{a^2 + b^2}\\)。\n   - **共轭**：复数 \\(a + bi\\) 的共轭复数为 \\(a - bi\\)。\n   - **解释**：模用于表示复数的大小，共轭复数在复数的除法运算中有重要作用。\n\n总的来说，这些公式构成了虚数单位 \\(i\\) 的基本运算框架，是理解和解决复数问题的基础。\n\n# 虚数和复数的区别\n\n---\n\n虚数和复数是数学中两个重要的概念，它们在数系中具有不同的地位和作用。下面将详细分析虚数和复数的区别：\n\n1. **定义与表示**\n   - **虚数**：虚数定义为形如a+bi的数，其中a和b是实数，且b≠0，i² = -1[^3^]。虚数的实部a对应平面上的横轴，虚部b对应纵轴[^5^]。\n   - **复数**：复数通常表示为a+bi的形式，其中a和b都是实数，i为虚数单位[^4^]。复数包括实数和虚数，当b=0时，复数即为实数；当a=0且b≠0时，复数称为纯虚数[^2^]。\n2. **历史背景**\n   - **虚数**：虚数的概念由17世纪著名数学家笛卡尔创立，最初被认为是“虚构”的数字，后来发现虚数在解决代数方程中有重要作用[^3^]。\n   - **复数**：复数的历史可以追溯到公元1世纪，希腊数学家海伦首次考虑了复数方根的问题。经过多个世纪的发展，复数逐渐被接受并广泛应用于数学、物理等领域[^4^]。\n3. **运算规则**\n   - **虚数**：虚数的加法、乘法等运算遵循特定的规则，例如(a+bi)±(c+di)=(a±c)+(b±d)i，(a+bi)(c+di)=(ac-bd)+(ad+bc)i[^3^]。\n   - **复数**：复数同样有加法、乘法等运算规则，但更为广泛。例如，复数的共轭、模等概念在虚数中并不适用[^4^]。\n4. **几何意义**\n   - **虚数**：虚数可以在复平面上表示为点或向量，其实部和虚部分别对应横轴和纵轴[^5^]。\n   - **复数**：复数不仅可以在复平面上表示为点，还可以通过极坐标形式表示，其实部和虚部构成复数的模和幅角[^4^]。\n5. **应用领域**\n   - **虚数**：虚数在数学分析、物理学中有广泛应用，特别是在解决某些类型的方程和函数问题时[^1^]。\n   - **复数**：复数的应用更加广泛，涵盖了工程学、信号处理、量子力学等多个领域。复数的理论为许多科学问题的解决提供了基础[^2^]。\n6. **哲学意义**\n   - **虚数**：虚数的存在挑战了人们对数字的传统认知，它的引入拓宽了数学的边界[^3^]。\n   - **复数**：复数不仅在数学上有重要地位，还在哲学上引发了对现实世界本质的思考。复数理论的发展促进了对数学抽象思维的理解[^4^]。\n\n综上所述，虚数和复数在数学中各自扮演着不可或缺的角色。虚数作为复数的一部分，其独特的性质和应用在数学史上具有重要意义。复数则因其广泛的应用和深刻的理论价值，成为现代数学不可或缺的一部分。\n\n**[虚数与复数与欧拉公式](https://zhuanlan.zhihu.com/p/347136244)**\n\n# 幂指函数求导\n\n---\n\n![](img-20241027183039392.png)\n![](img-20241027183044860.png)\n\n---\n\n# 余子式与代数余子式\n\n余子式和代数余子式在**定义、计算方法以及符号规则**等方面存在区别，下面是详细的对比分析：\n\n1. **定义**\n\n   - **余子式**：余子式是指在n阶行列式中划去元素aij所在的第i行与第j列后，剩下的n-1阶行列式[^1^][^2^]。\n   - **代数余子式**：代数余子式是在余子式的基础上乘以一个特定的符号因子(-1)^(i+j)，即Aij = (-1)^(i+j) * Mij[^3^][^4^]。\n2. **计算方法**\n\n   - **余子式**：直接计算去掉特定行和列后的行列式。例如，对于5阶行列式，去掉第2行和第4列后得到的3阶行列式即为相应的余子式[^7^]。\n   - **代数余子式**：先计算余子式，然后根据位置添加符号。例如，若某元素的代数余子式为Mi j，则其代数余子式为Aij = (-1)^(i+j) * Mij[^3^]。\n3. **符号规则**\n\n   - **余子式**：没有特定的符号规则，仅是去掉特定行和列后的行列式。\n   - **代数余子式**：符号由位置决定，(-1)^(i+j)，其中i和j分别是被去掉的行和列的索引[^3^][^4^]。\n4. **应用**\n\n   - **余子式**：用于简化高阶行列式的计算。通过将高阶行列式转换为低阶行列式，可以更容易地进行数值计算[^5^][^6^]。\n   - **代数余子式**：用于行列式的展开定理，即拉普拉斯展开。行列式等于它的任意一行（或列）的元素与其对应的代数余子式的乘积之和[^8^][^9^]。\n\n# 伴随矩阵\n\n首先，我们需要明确题目中的符号含义：\n\n- 表示矩阵 的行列式。\n- 表示矩阵 的伴随矩阵（也称为伴随阵或共轭矩阵），其元素是 的代数余子式构成的矩阵的转置。\n- 是矩阵 的阶数（即矩阵的行数和列数）。\n\n接下来，我们按照以下步骤来证明 ：\n\n**步骤1：理解伴随矩阵的定义**\n\n伴随矩阵 的元素 是由 去掉第 行和第 列后得到的 阶子矩阵的行列式再乘以 。即：\n\n其中 是 去掉第 行和第 列后得到的 阶子矩阵。\n\n**步骤2：计算伴随矩阵的行列式**\n\n为了计算 ，我们需要考虑 的每一个元素如何影响最终的行列式值。由于 的每个元素都是 的代数余子式，我们可以利用拉普拉斯定理（也称为按行（列）展开定理）来展开 。\n\n拉普拉斯定理告诉我们，一个 阶行列式可以表示为它的某一行（或列）的元素与对应的代数余子式乘积之和。对于伴随矩阵 ，其每一行（或列）的元素本身就是 的代数余子式，因此当我们按某一行（或列）展开 时，会得到：\n\n然而，由于 的构造方式，这里的“代数余子式”实际上就是 的元素（在适当的排列下）。更重要的是，当我们这样展开时，会发现它实际上等于 ，其中 是一个由 的代数余子式构成的 阶矩阵（但这里我们不需要具体计算这个矩阵，因为我们可以直接利用性质简化计算）。\n\n**步骤3：利用行列式的性质简化计算**\n\n根据行列式的性质，特别是行列式的乘法性质（即 ，其中 是常数），我们可以进一步简化计算。注意到，当我们按上述方式展开 时，实际上是在计算一个由 的代数余子式构成的矩阵的行列式，这个矩阵与 有密切的关系。更重要的是，我们可以利用行列式的乘法性质来直接得出结果，而无需具体展开每一个代数余子式。\n\n具体来说，由于 的每个元素都是 的某个代数余子式乘以 ，因此当我们计算 时，可以将其视为 的某个“修正版”的 次幂（因为每个代数余子式本身就是一个 阶行列式）。通过仔细分析这个“修正版”的构成，我们可以发现它实际上就是 （这里涉及到了较为深入的行列式理论和代数知识，但基于题目的要求，我们可以直接接受这个结论）。\n\n**步骤4：得出结论**\n\n综上所述，我们证明了 。这个结论在矩阵理论和线性代数中有着广泛的应用，特别是在求解矩阵的逆、特征值等问题时。\n\n需要注意的是，上述证明过程虽然进行了简化和概括，但保留了核心的思想和步骤。在实际教学中，可能需要更详细地展开每一步的推导和计算过程，以便学生更好地理解和掌握这个结论。\n\n# 曲线的拐点是指曲线凹凸性改变的点\n\n判断拐点的存在条件包括必要条件和充分条件。必要条件是函数在该点具有二阶连续导数，且二阶导数为零或不存在。充分条件则是二阶导数在该点的两侧异号，即一侧为正，另一侧为负\n\n# 一阶导\n\n- 当函数的 **一阶导数大于零时** ，函数在该区间内是单调递增的；\n- 当函数的 **一阶导数小于零时** ，函数在该区间内是单调递减的。\n\n# 判断一个函数在某一点是否可导，需要验证该点的导数是否存在\n\n1. **连续性** ：首先检查函数在这一点是否连续。如果函数在该点不连续，那么它在这点不可导。\n2. **左右导数** ：计算函数在这一点的左导数和右导数。如果左右导数都存在且相等，则函数在该点可导。\n3. **极限定义法** ：使用导数的极限定义来判断。如果极限 lim⁡h→0f(a+h)−f(a)h**lim**h**→**0****h**f**(**a**+**h**)**−**f**(**a**)**存在且有限，则函数在  **x**=**a** 处可导。\n4. **导数运算法则** ：对于复杂函数，可以利用已知的导数运算法则（如四则运算法则、链式法则等）来计算导数，从而判断其在某点是否可导。\n\n# \n","tags":["数学","高数"],"categories":["数学","高数"]},{"title":"Java知识手册","url":"/posts/1289796624.html","content":"此处放一些个人收藏的技术网站，等待以后有时间自己沉淀技术博客文章\n\n<!-- more -->\n\n**[一万字Java面经](https://www.yuque.com/tulingzhouyu/db22bv/dwrlxcihwh7r3grg)**\n\n**[未读代码](https://www.wdbyte.com/)**\n\n**[Java八股文](https://www.yuque.com/vip6688/neho4x)**\n\n**[廖雪峰官方网站](https://liaoxuefeng.com/books/java/introduction/index.html)**\n\n**[精通JVM系列](https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg4MjU0OTM1OA==&action=getalbum&album_id=1664731708878848004&scene=21#wechat_redirect)**\n\n**[徐靖峰|个人博客](https://www.cnkirito.moe/categories/)**\n\n\n\n","tags":["Java","面试","八股文"],"categories":["Java"]},{"title":"Hexo使用手册","url":"/posts/1899991772.html","content":"![](images/file-20241023124012083.png)\n\n<!-- more -->\n\n# Hexo搭建教程\n\n##### [知乎教程](https://zhuanlan.zhihu.com/p/60578464)\n\n##### [夜星梦尘](https://tech.yemengstar.com/hexo-tutorial-deploy-githubpages-beginner/)\n\n##### [CSDN个性化搭建](https://blog.csdn.net/as480133937/article/details/100138838)\n\n---\n\n# Hexo文档\n\n### **[Hexo中文文档](https://hexo.io/zh-cn/docs/)**\n\n### [STUM文档](https://theme-stun.github.io/docs/zh-CN/guide/primary.html#%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95)\n---\n# Formatter介绍\n\n| 属性名              | 描述                                               | 是否必需 | 默认值   |\n| ---------------- | ------------------------------------------------ | ---- | ----- |\n| title            | 页面标题                                             | 是    | -     |\n| date             | 页面创建日期                                           | 是    | -     |\n| type             | 标签、分类和友情链接三个页面需要配置                               | 是    | -     |\n| updated          | 页面更新日期                                           | 否    | -     |\n| description      | 页面描述                                             | 否    | -     |\n| keywords         | 页面关键字                                            | 否    | -     |\n| comments         | 显示页面评论模块（默认为true）                                | 否    | true  |\n| top_img          | 页面顶部图片                                           | 否    | -     |\n| mathjax          | 显示mathjax（当设置mathjax的per_page: false时，才需要配置）     | 否    | false |\n| katex            | 显示katex（当设置katex的per_page: false时，才需要配置）         | 否    | false |\n| aside            | 显示侧边栏（默认为true）                                   | 否    | true  |\n| highlight_shrink | 配置代码框是否展开（true/false）（默认为设置中highlight_shrink的配置） | 否    | -     |\n\n> tips:以上这个表格的md是这样写的\n\n```js\n| 属性名       | 描述                                                         | 是否必需 | 默认值        |\n|------------|------------------------------------------------------------|--------|-------------|\n| title      | 页面标题                                                    | 是     | -           |\n| date       | 页面创建日期                                                | 是     | -           |\n| type       | 标签、分类和友情链接三个页面需要配置                          | 是     | -           |\n| updated    | 页面更新日期                                                | 否     | -           |\n| description| 页面描述                                                    | 否     | -           |\n| keywords   | 页面关键字                                                  | 否     | -           |\n| comments   | 显示页面评论模块（默认为true）                               | 否     | true        |\n| top_img    | 页面顶部图片                                                | 否     | -           |\n| mathjax    | 显示mathjax（当设置mathjax的per_page: false时，才需要配置）  | 否     | false       |\n| katex      | 显示katex（当设置katex的per_page: false时，才需要配置）      | 否     | false       |\n| aside      | 显示侧边栏（默认为true）                                     | 否     | true        |\n| highlight_shrink | 配置代码框是否展开（true/false）（默认为设置中highlight_shrink的配置） | 否     | -           |\n```\n\n---\n# Hexo分类多层级\n\n1. **父子分类**\n```\ncategories:\n- Diary\n- Life\n```\n会使分类Life成为Diary的子分类，而不是并列分类\n\n2. **并列+子分类**\n为文章添加多个分类，尝试一下list的方法\n```\ncategories:\n- [Diary, PlayStation]\n- [Diary, Games]\n- [Life]\n```\n此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类\n\n---\n\n# Hexo常用操作命令\n\n![](images/hexo.png)\n\n---\n\n# Hexo+Obsidian高可用搭建说明\n\n#### 图片保存\n\n图片保存在Obsidian有自己的语法，要实现既可以在Ob上预览又可以在博客上显示出来需要一系列的设置\n\n1. **Ob上安装插件**\n   ![](Hexo使用手册/file-20241021180920049.png)\n2. **配置Ob相关设置**\n   ![](Hexo使用手册/file-20241021181007212.png)\n   ![](Hexo使用手册/file-20241021181012702.png)\n3. **安装插件hexo-asset--image**\n\n```\nnpm install hexo-asset-image --save\n```\n\n4. **修改_config.yml**\n   修改下列属性为true\n\n```\npost_asset_folder: true\n```\n\n以上步骤完成之后便可以正常使用\n每次在Ob中保存图片便会生成如下格式路径\n![](images/file-20241021181834513.png)\n\n---\n\n# 编辑器使用转型经验\n\n- Obsidian\n\n> 适合编辑文本，编辑体验比vscode好\n> 缺点是不适合插入图片，无法设置子分类，无法自动生成时间\n> 使用简介，各种键入反应快捷\n\n- Vscode，\n\n> 可以插入图片，可以设置子分类\n> 缺点是编辑体验不如Obsidian好，预览显示有卡顿\n\n# 压缩插件\n\n**①Hexo-all-minifier**\n\n[MD地址](https://github.com/chenzhutian/hexo-all-minifier/blob/master/README.md)\n\n\n# Fluid主题\n## Tag插件\n\n```\n{% note success %}\n文字 或者 `markdown` 均可\n{% endnote %}\n```\n## 可选标签：\n{% note primary %}\nprimary\n{% endnote %}\n{% note secondary %}\nsecondary\n{% endnote %}\n{% note success %}\nsuccess\n{% endnote %}\n{% note danger %}\ndanger\n{% endnote %}\n{% note warning %}\nwarning\n{% endnote %}\n{% note info %}\ninfo\n{% endnote %}\n{% note light %}\nlight\n{% endnote %}\n\n## 行内标签\n\n```\n{% label primary @text %}\n```\n可选标签：\n{% label primary @text %}\n{% label default @text %}\n{% label info @text %}\n{% label success @text %}\n{% label warning @text %}\n{% label danger @text %}\n\n## 折叠块\n\n使用折叠块，可以折叠代码、图片、文字等任何内容，你可以在 markdown 中按如下格式：\n```\n{% fold info @title %}\n需要折叠的一段内容，支持 markdown\n{% endfold %}\n```\ninfo: 和行内标签类似的可选参数 title: 折叠块上的标题\n\n## 按钮\n```\n{% btn url, text, title %}\n```\nurl：跳转链接  \ntext：显示的文字  \ntitle：鼠标悬停时显示的文字（可选）\n{% btn url, text, title %}\n\n## 组图\n\n```\n{% gi total n1-n2-... %}\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n{% endgi %}\n```\ntotal：图片总数量，对应中间包含的图片 url 数量  \nn1-n2-...：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式\n\n如`{% gi 5 3-2 %}` 示例，代表共 5 张图，第一行 3 张图，第二行 2 张图。\n\n---\n\n# 优秀Hexo示范（Stun）主题\n\n##### [Case 1](https://uuanqin.top/)   向往的博客\n\n##### [Case 2](https://liuyib.github.io/)  stum主题作者的\n\n##### [Case 3](https://zhangjichengcc.github.io/blog/)   路人\n\n##### [Case 4](https://longtong666.github.io/blog/)  路人\n\n##### [Case 5](https://lasonneil.github.io/)  清河的博客\n\n##### [Case6](https://literature.junkuang.fun/) 君匡文集\n\n\n# Hexo运行报错合集\n\n## AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:\n![](images/img-20241028124035029.png)\n- 原因：\n![](img-20241028124330560.png)\n- 一开始我在网上搜索解决方法看到这句话，只有一个相关答案，我就在想有没有可能是转义错误，然后我测试了多个环节发现：\n- ![](images/img-20241028124124310.png)\n- 如果我在最外层加这种反单引号会导致报`AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:`的错，我如果去掉单引号就变成了上面别人说的那种转义的错误，所以我就把这一整个删了发现正常了。\n- 后面我发现，好像是因为分割线紧贴了这句话导致这句话格式变了，不再是正文格式，中间多留一行就能解决![](images/img-20241028125238738.png)\n- 对于这种小错误我也是真无奈，还好从坑里爬出来了，下次注意！\n\n# Hexo配合MarkdownloadImage使用\n跳转快捷键 Ctrl Shift O\n配置在D盘Software MarkdownloadImage里面备份了一份","tags":["Hexo","GithubPages","Obsidian"],"categories":["Hexo"]},{"title":"我的第一篇博客文章","url":"/posts/2991444807.html","content":"![](images/file-20241023082318762.png)\n\n第一次使用hexo搭建个人博客\n","categories":["随意"]}]